#!/bin/sh
#
#  SDR Development tools, Solaris recording engine 
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 1.2

# ############################################################### #
# SDR Engine: Solaris                                             # 
# ############################################################### #


### extract_archive
extract_archive() {

# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# echo "module name: $modfile"
# echo "archive dir: $bfile"

if [ -d $bfile ]; then
    echo "Info: Step 1 - Extracting $bfile ..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
    echo "Warning: ${bfile} directory found, cleaning..." | tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean. Check ${modfile} , ${bfile}" | tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    echo "Info: Step 1 - Extracting $bfile ..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi
}


### init_module
init_module() {

# $1 directory name
directory=$1

cd $directory
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $directory" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
#echo "Directory: $directory"
#echo "Archive: $archive_file"

# dirarchive=${archive_file%%.tar*}
dirarchive=`echo $archive_file | sed 's/\.tar.*//'`

# Debug
#echo "DirArchive: $dirarchive"

extract_archive "$directory" "$dirarchive"

cd $dirarchive

}


### clean_module
clean_module() {
cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


### perl
build_rec_perl() {
dir=perl
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0
step7=0

init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# get CPAN version
cpanver=`echo $dirarchive | sed 's/perl-//'`

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure perl ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

sh Configure -Dcc='cc' -Doptimize='-xO3' -Duselargefiles -Duse64bitall \
             -Dcf_by="support@systemdatarecorder.org"       \
             -Dcf_email="support@systemdatarecorder.org"    \
             -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    # fix config.sh
    # Workaround: Bug 32 - SDR Perl - Memory leak in Perl 5.10+
    # on Solaris 10 with %ENV remove flag: -DPERL_USE_SAFE_PUTENV


    # ################################################################## #
    # fix ldflags
    # ################################################################## #
    echo "Fixing ldflags..." >> ${BUILD_PATH}/${BUILD_LOG}
    sed 's/^ldflags\=.*/ldflags\='\''\-m64 \-L\/lib\/64'\''/' config.sh > config.sh.tmp
    if [ $? -ne 0 ]; then
        echo "Error: fixing ldflags perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
    mv config.sh.tmp config.sh
    sed 's/^lddlflags\=.*/lddlflags\='\''\-G \-m64 \-L\/lib\/64 \-L\/usr\/lib\/amd64'\''/' config.sh > config.sh.tmp
    mv config.sh.tmp config.sh

    # ################################################################## #
    # fix libspath
    # ################################################################## #
    echo "Fixing libspath..." >> ${BUILD_PATH}/${BUILD_LOG}
    if [ "$PT_NAME" = "i86pc" ]; then
        sed 's/^libspath\=.*/libspath\='\''\/lib\/64 \/usr\/lib\/amd64 \/usr\/ccs\/lib\/amd64 \/usr\/lib \/usr\/ccs\/lib'\''/' config.sh > config.sh.tmp
    else
        sed 's/^libspath\=.*/libspath\='\''\/lib\/64 \/usr\/lib\/sparcv9 \/usr\/ccs\/lib\/sparcv9 \/usr\/lib \/usr\/ccs\/lib'\''/' config.sh > config.sh.tmp
    fi

    if [ $? -ne 0 ]; then
        echo "Error: fixing libpath perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
    mv config.sh.tmp config.sh

    # ################################################################## #
    # fix loclibpth
    # ################################################################## #
    echo "Fixing loclibpth..." >> ${BUILD_PATH}/${BUILD_LOG} 
    if [ "$PT_NAME" = "i86pc" ]; then
        sed 's/^loclibpth=.*/loclibpth\='\''\/lib\/64 \/usr\/lib\/amd64 \/usr\/ccs\/lib\/amd64'\''/' config.sh > config.sh.tmp
    else
       sed 's/^loclibpth=.*/loclibpth\='\''\/lib\/64 \/usr\/lib\/sparcv9 \/usr\/ccs\/lib\/sparcv9'\''/' config.sh > config.sh.tmp
    fi
    if [ $? -ne 0 ]; then
        echo "Error: fixing loclibpth perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
    mv config.sh.tmp config.sh

    # ################################################################## #
    # fix ccflags
    # ################################################################## #
    echo  "Fixing ccflags..." >> ${BUILD_PATH}/${BUILD_LOG}
    sed 's/^ccflags\=.*/ccflags\='\''\-m64 \-D_LARGEFILE_SOURCE \-D_FILE_OFFSET_BITS=64'\''/' config.sh > config.sh.tmp

    if [ $? -ne 0 ]; then
        echo "Error: fixing ccflags perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
    mv config.sh.tmp config.sh

    sh Configure -S >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    make depend >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: make depend perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step2=1
    fi
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make test perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
#make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
echo test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make test perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Make install perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
if [ -d ${iprefix}/perl ]; then
    echo "Warning: perl directory found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm -rf ${iprefix}/perl
    if [ $? -ne 0 ]; then
        echo "Error: cleaning $dir directory" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
fi
 
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi

           
# STEP 6
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 6 - CPAN modules" | tee -a ${BUILD_PATH}/${BUILD_LOG}

cp ${BUILDER_PREFIX}/etc/Config.pm ${iprefix}/perl/lib/${cpanver}/CPAN 

for lib in Digest::SHA Proc::Daemon Proc::PID::File File::Tail JSON HTTP::Response
do
    ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: $lib installation failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step6=`expr $step6 + 1`
    fi
done

# there are 6 perl modules install calls
step6=`expr $step6 / 6`



# ############################################################### #
# STEP 7
# ############################################################### #
cd ../..

dir=kstat
cd lib/$dir

# get the perl archive
# ls *.tar.gz | read build_file

# archive=${build_file%%.tar*}
# extract_archive "$dir" "$archive"

#  Sun::Solaris::Exacct
#  Sun::Solaris::Kstat
#  Sun::Solaris::Lgrp
#  Sun::Solaris::Privilege
#  Sun::Solaris::Task
#  Sun::Solaris::Utils


echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 7 - building Solaris modules" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# ############################################################### #
# Exacct MODULE
# ############################################################### #
cd Exacct
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Exacct cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: building Sun::Solaris::Exacct module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Exacct perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Exacct make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Exacct make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

cd ..

# ############################################################### #
# KSTAT MODULE
# ############################################################### #
cd Kstat
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Kstat cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: building Sun::Solaris::Kstat module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Kstat perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Kstat make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Kstat make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

cd ..


# ############################################################### #
# LGRP MODULE
# ############################################################### #
cd Lgrp 
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Lgrp cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: building Sun::Solaris::Lgrp module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Lgrp perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Lgrp make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Lgrp make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

cd ..


# ############################################################### #
# Privilege MODULE
# ############################################################### #
cd Privilege
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Privilege cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: building Sun::Solaris::Privilege module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Privilege perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Privilege make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Privilege make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

cd ..

# ############################################################### #
# Task MODULE
# ############################################################### #
cd Task 
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Task cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: building Sun::Solaris::Task module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Task perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Task make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Task make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

cd ..


# ############################################################### #
# Utils MODULE
# ############################################################### #
cd Utils 
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Utils cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: building Sun::Solaris::Utils module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Utils perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Utils make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sun::Solaris::Utils make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=`expr $step7 + 1`
fi

# step 7 = 24 checks
step7=`expr $step7 / 24`;

# final check; all 7 steps
perl_done=`expr $step1 + $step2 + $step3 + $step4 + $step5 + $step6 + $step7`
if [ "$perl_done" -eq 7 ]; then
   perl_done=1
else
   perl_done=90
fi

clean_module

# back to root
cd ..

}


### openssl
build_rec_ossl() {
dir="openssl"
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"

if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "i86pc" ]; then
    /usr/bin/env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH CC=cc \
         ./Configure solaris64-x86_64-cc threads shared no-sse2 --prefix=${iprefix} \
          --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH CC=cc \
     ./Configure solaris64-sparcv9-cc threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# fix xarch
echo "Fixing arch flag..." >> ${BUILD_PATH}/${BUILD_LOG}
if [ $PT_NAME = "i86pc" ]; then
    sed 's/\-xarch\=amd64/\-m64/g' Makefile > Makefile.tmp
else
    sed 's/\-xarch\=v9/\-m64/g' Makefile > Makefile.tmp
    
fi
if [ $? -ne 0 ]; then
    echo "Error: fixing xarch Makefile failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi
mv Makefile.tmp Makefile

echo "Fixing SHARED_LDFLAGS flag..." >> ${BUILD_PATH}/${BUILD_LOG}

sed "s:SHARED_LDFLAGS=-m64 -G -dy -z text:SHARED_LDFLAGS=-m64 -G -dy -z text -L${iprefix}/lib -R${iprefix}/lib -L/usr/lib:" Makefile > Makefile.tmp

if [ $? -ne 0 ]; then
    echo "Error: fixing SHARED_LDFLAGS Makefile failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi
mv Makefile.tmp Makefile


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
ossl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$ossl_done" -eq 4 ]; then
   ossl_done=1
else
   ossl_done=90
fi

clean_module

# back to root
cd ..

}


### libidn
build_rec_idn() {
dir=idn
step1=0
step2=0
step3=0
step4=0

cd lib

init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-m64 -xO3 -KPIC -I${iprefix}/include" \
    LDFLAGS="-m64 -L${iprefix}/lib -R${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
idn_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$idn_done" -eq 4 ]; then
   idn_done=1
else
   idn_done=90
fi

clean_module

# back to root
cd ..

}


### curl
build_rec_curl() {
dir=curl
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig:/usr/lib/64/pkgconfig \
CC=cc CFLAGS="-m64 -xO3 -KPIC" CPPFLAGS="-I${iprefix}/include" \
LDFLAGS="-m64 -L${iprefix}/lib -R${iprefix}/lib -L/usr/lib/64 -R/usr/lib/64 \
-L/usr/sfw/lib/64 -R/usr/sfw/lib/64" \
./configure --with-ssl=${iprefix} --with-libidn=${iprefix} \
--prefix=${iprefix} --enable-cookies --enable-nonblocking \
--disable-ldap --disable-ldaps >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f ${iprefix}/bin/curl ]; then
    echo "Warning: $dir binary found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm ${iprefix}/bin/curl
    rm ${iprefix}/bin/curl-config
    if [ $? -ne 0 ]; then
        echo "Error: cleaning idn binary failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

fi

if [ -d ${iprefix}/lib ]; then
    echo "Warning: lib directory found..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    for f in `find ${iprefix}/lib -name '*curl*'`
    do
        echo "Cleaning file: $f..." |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm $f
        if [ $? -ne 0 ]; then
            echo "Error: cleaning lib $f file failed !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    done
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
curl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$curl_done" -eq 4 ]; then
   curl_done=1
else
   curl_done=90
fi

clean_module

# back to root
cd ..

}


# perl WWW::Curl
build_rec_wcurl() {

#  WWW-Curl-4.xx:
#  perl Makefile.PL
#  Modify the Makefile to include -L/opt/sdr/lib -R/opt/sdr/lib
#
#  LDDLFLAGS = -L/lib64 -L/usr/lib64 -L/opt/sdr/lib
#  LDFLAGS = -L/lib64 -L/usr/lib64 -L/opt/sdr/lib
#
#  make
#  make install

dir=WWW-Curl
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


/usr/bin/env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

# LDFLAGS =  -m64 -L/lib/64 
sed "s:LDFLAGS =  -m64 -L/lib/64:LDFLAGS = -m64 -L${iprefix}/lib -R${iprefix}/lib -L/lib/64:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

# LDDLFLAGS =  -G -m64 -L/lib/64
sed "s:LDDLFLAGS =  -G -m64 -L/lib/64:LDDLFLAGS = -G -m64 -L${iprefix}/lib -R${iprefix}/lib -L/lib/64:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

#
# final check; all 4 steps
wwwcurl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$wwwcurl_done" -eq 4 ]; then
   wwwcurl_done=1
else
   wwwcurl_done=90
fi

clean_module

# back to root
cd ..

}


### webrec
build_rec_webrec() {

dir=WebRec
step1=0
step2=0
step3=0


cd $dir
echo "\n############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

/usr/bin/env JAVA_HOME=/opt/java/current ant clean >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi  

# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
/usr/bin/env JAVA_HOME=/opt/java/current ant >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi 

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# etc copy
if [ ! -d ${iprefix}/etc ]; then
    mkdir ${iprefix}/etc
fi

cp etc/log4j.properties ${iprefix}/etc
cp etc/webrec.conf ${iprefix}/etc

# lib
if [ ! -d ${iprefix}/lib ]; then
    mkdir ${iprefix}/lib
fi

cp lib/*.jar ${iprefix}/lib
cp dist/webrec.jar ${iprefix}/lib
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi
#

# final check; all 4 steps
wrec_done=`expr $step1 + $step2 + $step3`
if [ "$wrec_done" -eq 3 ]; then
   wrec_done=1
else
   wrec_done=90
fi


cd ..

}


### configuration settings
build_rec_scripts() {

dir=bin
step1=0
step2=0

cd ${dir}
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing setenv ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f setenv ]; then
    cp setenv  ${iprefix}/bin
    if [ $? -ne 0 ]; then
        echo "Error: cannot install setenv script !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
else
    echo "Error: setenv missing, check workspace !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


cd ${OS_NAME}
# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Installing recorders ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

#corerec corestat.sparc64, corestat.t1, corestat.t2
#cpurec
#hdwrec
#jvmrec
#netrec
#nicrec
#sender
#sysrec
#webrec
#zonerec
nrecs=`ls *rec | wc -l`
if [ "$nrecs" -ne 9 ]; then
    echo "Error: wrong no. of recorders, check workspace !" |\
     tee -a ${BUILd_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    cp sysrec cpurec nicrec hdwrec netrec jvmrec webrec zonerec  ${iprefix}/bin
    if [ $PT_NAME != "i86pc" ]; then
        cp core* ${iprefix}/bin
    fi
    if [ $? -ne 0 ]; then
        echo "Error: cannot install rec scripts !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step2=1
    fi
fi


# set the other bins
cp sender ${iprefix}/bin
if [ $? -ne 0 ]; then
    echo "Error: cannot install additional bins !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# set etc settings
cd ../..
cp -R etc/${OS_NAME}/* ${iprefix}/etc
cp etc/*.start ${iprefix}/etc
cp etc/sdr.json ${iprefix}/etc
cp etc/sdr ${iprefix}/etc
cp etc/sdr ${iprefix}/etc
cp etc/sdr.transport ${iprefix}/etc
if [ $? -ne 0 ]; then
    echo "Error: cannot install etc settings !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# final check; all 2 steps
recs_done=`expr $step1 + $step2`
if [ "$recs_done" -eq 2 ]; then
   recs_done=1
else
   recs_done=0
fi


# set man pages
if [ ! -d ${iprefix}/man ]; then
    mkdir ${iprefix}/man
fi  

cp -pr man/${OS_NAME}/* ${iprefix}/man
if [ $? -ne 0 ]; then
    echo "Error: cannot install man pages !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# link man to share man
ln -s ${iprefix}/share/man/man3 ${iprefix}/man
ln -s ${iprefix}/share/man/man8 ${iprefix}/man
ln -s ${iprefix}/share/man/man5 ${iprefix}/man
for man in `ls ${iprefix}/share/man/man1`
do
    ln -s ${iprefix}/share/man/man1/${man} ${iprefix}/man/man1
done 


# set release notes
cp release.notes.${OS_NAME} ${iprefix}/release.notes
if [ $? -ne 0 ]; then
    echo "Error: cannot install release.notes !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set README 
cp README.${OS_NAME} ${iprefix}
if [ $? -ne 0 ]; then
    echo "Error: cannot install README.${OS_NMAE} !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set log directory
if [ ! -d ${iprefix}/log ]; then
    # setup daily log
    mkdir -p ${iprefix}/log/daily
    if [ $? -ne 0 ]; then
        echo "Error: cannot set log/daily director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

    # setup current log
    mkdir -p ${iprefix}/log/current
    if [ $? -ne 0 ]; then
        echo "Error: cannot set log/current director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
else
    # we have log dir, check daily, raw
    if [ ! -d ${iprefix}/log/daily ]; then 
        mkdir ${iprefix}/log/daily
        if [ $? -ne 0 ]; then
            echo "Error: cannot set log/daily director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi

    if [ ! -d ${iprefix}/log/current ]; then 
        mkdir ${iprefix}/log/current
        if [ $? -ne 0 ]; then
            echo "Error: cannot set log/current director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi
fi

}


### testing
test_rec_scripts() {

dir=tests
step1=0
step2=0


cd $dir
echo "\n############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Testing SDR" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
# Check all recorders if they are sane and execute properly

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Check recorders" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

. ${iprefix}/bin/setenv
for r in sys cpu nic hdw 
do
    echo "" >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    echo "Executing ${r}rec" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    ${SDR_BIN}/${r}rec >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: cannot run ${r}rec !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
done

step1=`expr $step1 / 6`

# STEP 2
# Check all shared libs if they are build correctly

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Check libs" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

noErrors=0
for lib in `ls ${iprefix}/lib/*.so`
do
    noErrors=`ldd $lib | grep 'not found' | wc -l`
    if [ "$noErrors" -ne 0 ]; then
        echo "LIB ERROR: $lib" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        noErrors=`expr $noErrors + 1`
    fi
done

if [ "$noErrors" -eq 0 ]; then
    step2=1
fi


# final check; all 4 steps
tests_done=`expr $step1 + $step2` 
if [ "$tests_done" -eq 2 ]; then
   tests_done=1
else
   tests_done=90
fi

cd ..

}
