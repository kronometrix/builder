#!/bin/sh
#
# Kronometrix Development tools
# Analytics Monitoring Engine
#
# Copyright (c) 2018, SDR Dynamics, Stefan Parvu
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Source:  https://github.com/kronometrix/auth/blob/master/LICENSE
#
# VERSION: 3.3

# ############################################################### #
# Engine: FreeBSD                                                 # 
# ############################################################### #

cpanver=0

### extract_archive
extract_archive() {

# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# echo "module name: $modfile"
# echo "archive dir: $bfile"

if [ -d $bfile ]; then
    echo "Info: Step 1 - Extracting $bfile ..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
    echo "Warning: ${bfile} directory found, cleaning..." | tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean. Check ${modfile} , ${bfile}" | tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    echo "Info: Step 1 - Extracting $bfile ..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi
}


### init_module
init_module() {

# $1 directory name
directory=$1

cd $directory
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $directory" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
#echo "Directory: $directory"
#echo "Archive: $archive_file"

# dirarchive=${archive_file%%.tar*}
dirarchive=`echo $archive_file | sed 's/\.tar.*//'`

# Debug
#echo "DirArchive: $dirarchive"

extract_archive "$directory" "$dirarchive"

cd $dirarchive

}


### clean_module
clean_module() {
cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


### perl
build_mon_perl() {
dir=perl
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0

init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# get CPAN version
cpanver=`echo $dirarchive | sed 's/perl-//'`

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure perl ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "amd64" ]; then
    sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitall \
        -Dcf_by="support@kronometrix.org"       \
        -Dcf_email="support@kronometrix.org"    \
        -Dman1dir="none" -Dman3dir="none"        \
        -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitint \
        -Dcf_by="support@kronometrix.org"       \
        -Dcf_email="support@kronometrix.org"    \
        -Dman1dir="none" -Dman3dir="none"        \
        -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make test perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make test perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Make install perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
if [ -d ${iprefix}/perl ]; then
    echo "Warning: perl directory found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm -rf ${iprefix}/perl
    if [ $? -ne 0 ]; then
        echo "Error: cleaning $dir directory" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
fi
 
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi
           
# final check; all 5 steps
mon_perl_done=`expr $step1 + $step2 + $step3 + $step4 + $step5`
if [ "$perl_done" -eq 5 ]; then
   mon_perl_done=1
else
   mon_perl_done=90
fi

clean_module

}


### openssl
build_mon_ossl() {
dir="openssl"
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"

if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "amd64" ]; then
    /usr/bin/env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH CC=cc \
         ./Configure BSD-x86_64 threads shared --prefix=${iprefix} \
          --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
elif [ "$PT_NAME" = "arm" ]; then
    /usr/bin/env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH CC=cc \
        ./Configure BSD-generic32 threads shared --prefix=${iprefix} \
        --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
elif [ "$PT_NAME" = "aarch64" ]; then
    /usr/bin/env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH CC=cc \
        ./Configure BSD-generic64 threads shared  --prefix=${iprefix} \
        --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH CC=cc \
     ./Configure BSD-x86-elf threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


echo "Fixing SHARED_LDFLAGS flag..." >> ${BUILD_PATH}/${BUILD_LOG}
if [ "$PT_NAME" = "amd64" -o "$PT_NAME" = "aarch64" ]; then
    sed "s:^LDFLAGS=.*:LDFLAGS=-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
    sed "s:^LIB_LDFLAGS=.*:LIB_LDFLAGS=-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile.tmp > Makefile.tmp2
    mv Makefile.tmp2 Makefile
else
    sed "s:^LDFLAGS=.*:LDFLAGS=-m32 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
    sed "s:^LIB_LDFLAGS=.*:LIB_LDFLAGS=-m32 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile.tmp > Makefile.tmp2
    mv Makefile.tmp2 Makefile
fi

if [ $? -ne 0 ]; then
    echo "Error: fixing SHARED_LDFLAGS Makefile failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
mon_ossl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$mon_ossl_done" -eq 4 ]; then
   mon_ossl_done=1
else
   mon_ossl_done=90
fi

clean_module

# back to root
cd ..

}

### perl Net::SSLeay
build_mon_perlssl() {

dir=Net-SSLeay
step1=0
step2=0
step3=0
step4=0
step5=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

PERL_MM_USE_DEFAULT=1 \
OPENSSL_PREFIX=${iprefix} \
${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

if [ "$PT_NAME" = "aarch64" ]; then
    sed "s:^LDFLAGS =.*:LDFLAGS=-Wl,-E  -fstack-protector-strong -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
    sed "s:^LDDLFLAGS =.*:LDDLFLAGS=-shared -fstack-protector-strong -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile.tmp > Makefile.tmp2
    mv Makefile.tmp2 Makefile
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install Proc::Daemon failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Install IO::Socket::SSL..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

lib='IO::Socket::SSL'
env PERL_MM_USE_DEFAULT=1 \
  ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: $lib installation failed !" |\
    tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step5=`expr $step5 + 1`
fi

## final check; all 5 steps
mon_perlssl_done=`expr $step1 + $step2 + $step3 + $step4 + $step5`
if [ "$mon_perlssl_done" -eq 5 ]; then
   mon_perlssl_done=1
else
   mon_perlssl_done=90
fi

clean_module

# back to root
cd ..

}

### perl-cpan-libs
build_mon_perlcpan() {

step1=0

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: perl cpan" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Install Perl CPAN modules" | tee -a ${BUILD_PATH}/${BUILD_LOG}

cp ${BUILDER_PREFIX}/etc/Config.pm ${iprefix}/perl/lib/${cpanver}/CPAN
        
${iprefix}/perl/bin/perl -MCPAN -e 'install BSD::Sysctl' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: BSD::Sysctl installation failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=`expr $step1 + 1`
fi
    
 
for lib in Digest::SHA Proc::Daemon Proc::ProcessTable Proc::PID::File File::Tail \
           JSON::XS JSON HTTP::Response UUID::Tiny Carp::Assert \
           Date::Calc Filesys::Df Tie::IxHash Redis Text::CSV_XS Text::CSV
do
    if  [ "$lib" = "JSON::XS" ]; then
        env PERL_MM_USE_DEFAULT=1 \
        ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if [ $? -ne 0 ]; then
            echo "Error: $lib installation failed !" |\
                tee -a ${BUILD_LOG}/${module}.${version}.log
            rm /var/tmp/build.${module}

            exit 3
        else
            step1=`expr $step1 + 1`
            continue
        fi
    else
        ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if [ $? -ne 0 ]; then
            echo "Error: $lib installation failed !" |\
                tee -a ${BUILD_LOG}/${module}.${version}.log
            rm /var/tmp/build.${module}
            exit 3
        else
            step1=`expr $step1 + 1`
            continue
        fi
    fi
done

# there are 17 perl modules install calls
step1=`expr $step1 / 17`

## final check; 1 step
mon_perlcpan_done=$step1
if [ "$mon_perlcpan_done" -eq 1 ]; then
   mon_perlcpan_done=1
else
   mon_perlcpan_done=90
fi

}


### configuration settings
build_mon_scripts() {

dir=bin
step1=0
step2=0

cd ${dir}
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing setenv ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ ! -d ${iprefix}/bin ]; then
    mkdir ${iprefix}/bin
fi

if [ -f setenv ]; then
    cp setenv  ${iprefix}/bin
    if [ $? -ne 0 ]; then
        echo "Error: cannot install setenv script !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
else
    echo "Error: setenv missing, check workspace !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

cd ${OS_NAME}
# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Installing recorders ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp sysrec ${iprefix}/bin
cp ../actmsg ${iprefix}/bin
cp ../raw2day ${iprefix}/bin
if [ $? -ne 0 ]; then
    echo "Error: cannot install rec scripts !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# set the other bins
cp sender ${iprefix}/bin
if [ $? -ne 0 ]; then
    echo "Error: cannot install additional bins !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# set etc settings
if [ ! -d ${iprefix}/etc ]; then
    mkdir ${iprefix}/etc 
    if [ $? -ne 0 ]; then
        echo "Error: cannot set etc director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
fi

cd ../..
cp etc/*.start ${iprefix}/etc
cp etc/kronometrix.json ${iprefix}/etc
cp etc/agents ${iprefix}/etc
cp etc/transport ${iprefix}/etc
cp etc/kmon ${iprefix}/etc
cp etc/${OS_NAME}/kronometrix.newsyslog ${iprefix}/etc
mkdir ${iprefix}/etc/rc
cp etc/${OS_NAME}/k* ${iprefix}/etc/rc
if [ $? -ne 0 ]; then
    echo "Error: cannot install etc settings !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# final check; all 2 steps
mon_done=`expr $step1 + $step2`
if [ "$recs_done" -eq 2 ]; then
   mon_done=1
else
   mon_done=0
fi

# set log directory
if [ ! -d ${iprefix}/log ]; then
    # setup daily log
    mkdir -p ${iprefix}/log/daily
    if [ $? -ne 0 ]; then
        echo "Error: cannot set log/daily director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

    # setup current log
    mkdir -p ${iprefix}/log/current
    if [ $? -ne 0 ]; then
        echo "Error: cannot set log/current director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
else
    # we have log dir, check daily, raw
    if [ ! -d ${iprefix}/log/daily ]; then 
        mkdir ${iprefix}/log/daily
        if [ $? -ne 0 ]; then
            echo "Error: cannot set log/daily director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi

    if [ ! -d ${iprefix}/log/current ]; then 
        mkdir ${iprefix}/log/current
        if [ $? -ne 0 ]; then
            echo "Error: cannot set log/current director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi
fi

}


### tar package
build_mon_tar_pkg() {

step1=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd ${iprefix}/..

if [ "$buildno" -ne 0 ]; then
    tar cf /var/tmp/kmon-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar kronometrix/mon
    if [ -f /var/tmp/kmon-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        rm /var/tmp/kmon-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2
    fi
    bzip2 /var/tmp/kmon-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar
    if [ $? -ne 0 ]; then
        echo "Error: cannot create kronometrix data recording package !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
else
    # GA General Release
    tar cf /var/tmp/kmon-${krmxver}-${DIST_ID}.${PT_NAME}.tar kronometrix/mon
    if [ -f /var/tmp/kmon-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        rm /var/tmp/kmon-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2
    fi
    bzip2 /var/tmp/kmon-${krmxver}-${DIST_ID}.${PT_NAME}.tar
    if [ $? -ne 0 ]; then
        echo "Error: cannot create kronometrix data recording package !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
fi

# final check; 1 step
mon_tar_pkg_done=$step1
if [ "$mon_tar_pkg_done" -eq 1 ]; then
   mon_tar_pkg_done=1
else
   mon_tar_pkg_done=90
fi

cd ${WORKSPACE}/${module}

}


### freebsd package
build_mon_freebsd_pkg() {

dir='pkg/freebsd'
step1=0
step2=0
step3=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: FreeBSD package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Create stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    pkgname="kmon-${krmxver}-amd64"
else
    pkgname="kmon-${krmxver}-${PT_NAME}"
fi

if [ ! -d $pkgname ]; then
    mkdir -p "$pkgname"
    if [ $? -ne 0 ]; then
        echo "Error: cannot set working package directory !" |\
            tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
fi


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Prepare stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# copy config files
cp pkg-install pkg-deinstall $pkgname/
if [ "$PT_NAME" = "amd64" ]; then
    cp MANIFEST.amd64 $pkgname/MANIFEST
elif [ "$PT_NAME" = "i386" ]; then
    cp MANIFEST.i386 $pkgname/MANIFEST
elif [ "$PT_NAME" = "arm" ]; then
    cp MANIFEST.arm $pkgname/MANIFEST
elif [ "$PT_NAME" = "aarch64" ]; then
    cp MANIFEST.aarch64 $pkgname/MANIFEST
fi

cd ${pkgname}

if [ "$buildno" -ne 0 ]; then
    # get control file fixed correct build and version
    sed "s/^version.*/version: \"${krmxver}b${buildno}\"/" MANIFEST > MANIFEST.tmp
    mv MANIFEST.tmp MANIFEST
else
    # get control file fixed correct build and version
    sed "s/^version.*/version: \"${krmxver}\"/" MANIFEST > MANIFEST.tmp
    mv MANIFEST.tmp MANIFEST
fi

if [ -d /opt/kronometrix/mon ]; then

    for f in `find /opt/kronometrix/mon -type d -empty`
    do
        echo "$f: \"-\"," >> dirs.txt
    done
    echo "directories: {" >> MANIFEST
    cat dirs.txt >> MANIFEST
    echo "}" >> MANIFEST

    for f in `find /opt/kronometrix/mon -type f`
    do
        echo "$f: \"`sha256 -q $f`\"," >> files.txt
    done
    echo "files: {" >> MANIFEST
    cat files.txt >> MANIFEST
    echo "}" >> MANIFEST
fi

if [ $? -ne 0 ]; then
    echo "Error: cannot set FreeBSD pkg, MANIFEST create error !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=`expr $step2 + 1`
fi

if [ -f files.txt ]; then
    rm files.txt
fi

if [ -f dirs.txt ]; then
    rm dirs.txt
fi
mv MANIFEST \+MANIFEST
(cd /opt/kronometrix ; tar cf - mon)|(mkdir -p opt/kronometrix; cd opt/kronometrix; tar xpf -)

pkg create -m . -r . -o /var/tmp >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cannot build FreeBSD pkg, pkg create error !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=`expr $step2 + 1`
fi

# set release
#REL=`echo $KERNEL | sed 's/\-.*//'`

# copy config files
if [ "$buildno" -ne 0 ]; then
    mv /var/tmp/kmon-${krmxver}b${buildno}.txz /var/tmp/kmon-${krmxver}b${buildno}-${OS_NAME}${RELOS}-${PT_NAME}.txz
else
    cp /var/tmp/kmon-${krmxver}.txz /var/tmp/kmon-${krmxver}-${OS_NAME}${RELOS}-${PT_NAME}.txz
fi

step2=`expr $step2 / 2`

cd ..

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Cleanup stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -d $pkgname ]; then
    rm -rf $pkgname
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean stage directory !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step3=1
    fi
fi


# final check; 3 steps
mon_pkg_done=`expr $step1 + $step2 + $step3`
if [ "$mon_pkg_done" -eq 3 ]; then
   mon_pkg_done=1
else
   mon_pkg_done=90
fi

cd ../..

}



build_mon_pkg() {

dir=pkg
step1=0
step2=0


echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: tar package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
# tar package must be created

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Kronometrix tar package" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

build_mon_freebsd_pkg

}
