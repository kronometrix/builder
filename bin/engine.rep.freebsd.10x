#/bin/sh
#
#  SDR Development tools, Linux reporting engine 
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 1.1 

# ############################################################### #
# SDR Engine: Reporting Linux                                     #
# ############################################################### #


# ############################################################### #
# extract_archive                                                 #
# ############################################################### #
extract_archive() {
# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# echo "module name: $modfile"
# echo "archive dir: $bfile"

if [ -d "$bfile" ]; then
    echo "Info: Step 1 - Extracting $bfile ..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    echo "Warning: ${bfile} directory found, cleaning..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean. Check ${modfile} , ${bfile}" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    echo "Info: Step 1 - Extracting $bfile ..." |\
    tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

}


# ############################################################### #
# Reporting: memcached Build Phase                                #
# ############################################################### #
build_rep_mcd() {
dir=memcached
step1=0
step2=0
step3=0
step4=0

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    PKG_CONFIG_PATH=/usr/local/libdata/pkgconfig  \
    CC=cc CFLAGS="-O3 -I/usr/local/include -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -L/usr/local/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --enable-64bit --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
rep_mcd_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $rep_mcd_done -eq 4 ]; then
   rep_mcd_done=1
else
   rep_mcd_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# ############################################################### #
# Reporting: rrdtool Build Phase                                  #
# ############################################################### #
build_rep_rrd() {
dir=rrdtool
step1=0
step2=0
step3=0
step4=0


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    PKG_CONFIG_PATH=/usr/local/libdata/pkgconfig      \
    CC=cc CFLAGS="-O3 -I/usr/local/include -I${iprefix}/include"  \
    LDFLAGS="-L${iprefix}/lib -L/usr/local/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --disable-ruby --disable-tcl --disable-python \
                --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
rep_rrd_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $rep_rrd_done -eq 4 ]; then
   rep_rrd_done=1
else
   rep_rrd_done=90
fi

# get RRD bindings installed

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Perl RRD modules..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -d bindings ];then
    cd bindings 

    # perl-piped
    cd perl-piped

    make clean >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: rrd perl-piped make clean failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
    fi

    ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: rrd perl-piped Makefile.PL failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
    fi

    make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: rrd perl-piped make failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
    fi

    make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: rrd perl-piped make test failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
    fi

    make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: rrd perl-piped make install failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
    fi

    # perl-shared
    cd ../perl-shared
   
    make clean >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: rrd perl-shared make clean failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
    fi

    ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: rrd perl-shared Makefile.PL failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
    fi
 
    # fix Makefile
    ${iprefix}/perl/bin/perl -pe \
     "s%^LDFLAGS = .*%LDFLAGS = -fstack-protector \
     -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib %" -i Makefile >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

    ${iprefix}/perl/bin/perl -pe \
     "s%^LDDLFLAGS = .*%LDDLFLAGS = -shared -O3 \
     -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib%" -i Makefile >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

    make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: rrd perl-shared make failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
    fi

    make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: rrd perl-shared make test failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
    fi

    make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: rrd perl-shared make install failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
    fi
   
    # back to rrdtool main installation
    cd ../..
fi
 

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: Perl Module: Cache::Memcached::Fast                  #
# ############################################################### #

build_rep_cache_mcd_fast() {
dir=Cache-Memcached-Fast
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL  >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

#
# final check; all 4 steps
rep_cache_mcd_fast_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $rep_cache_mcd_fast_done -eq 4 ]; then
   rep_cache_mcd_fast_done=1
else
   rep_cache_mcd_fast_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: Perl Build Phase                                     #
# ############################################################### #
build_rep_perl() {
dir=perl
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0
step7=0

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# get CPAN version
cpanver=`echo $dirarchive | sed 's/perl-//'`

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure perl ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "amd64" ]; then
   sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitall \
   -Dcf_by="support@systemdatarecorder.org"       \
   -Dcf_email="support@systemdatarecorder.org"    \
   -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
   sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitint \
   -Dcf_by="support@systemdatarecorder.org"       \
   -Dcf_email="support@systemdatarecorder.org"    \
   -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make test perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make test perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi

# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Make install perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
if [ -d ${iprefix}/perl ]; then
    echo "Warning: perl directory found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm -rf ${iprefix}/perl
    if [ $? -ne 0 ]; then
        echo "Error: cleaning $dir directory" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi
fi
 
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step5=1
fi

# STEP 6

echo "" >> ${BUILD_PATH}/${BUILD_LOG}

echo "Info: Step 6 - CPAN modules" | tee -a ${BUILD_PATH}/${BUILD_LOG}

cp ${BUILDER_ROOT}/etc/Config.pm ${iprefix}/perl/lib/${cpanver}/CPAN

for lib in FCGI CGI CGI::Simple CGI::Session FCGI::ProcManager DBI IO::All \
Date::Manip Date::Calc Statistics::Distributions Statistics::Frequency \
Statistics::Shannon Statistics::GammaDistribution Statistics::Basic \
Smart::Comments Authen::SASL Email::Valid MIME::Lite Text::CSV_XS \
Text::CSV Regexp::Common Compress::Zlib Regexp::Log::DateRange \
Text::Autoformat Text::FormatTable Data::Dumper Perl::Critic \
Devel::Cover Devel::Cycle Data::Report Test::Deep Devel::Size \
CGI::FormBuilder Logfile::Rotate Log::Log4perl Geo::IPfree Log::Handler \
Archive::Zip Time::HiRes Tie::Array::CSV Net::IP XML::SAX Mail::Sender \
HTML::Template::Pro XML::NamespaceSupport version SemVer Plack Session::Token \
Crypt::PBKDF2 Mojolicious AnyEvent EV
do
    if [ "$lib" = "MIME::Lite" ]; then
        env PERL_MM_USE_DEFAULT=1 \
          ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> \
          ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if [ $? -ne 0 ]; then
            tee -a ${BUILD_PATH}/${BUILD_LOG}
            exit 3
        else
            step6=`expr $step6 + 1`
            continue
        fi
    elif [ $lib = "Mail::Sender" ]; then
        env PERL_MM_USE_DEFAULT=1 \
          ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> \
          ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if [ $? -ne 0 ]; then
            tee -a ${BUILD_PATH}/${BUILD_LOG}
            exit 3
        else
            step6=`expr $step6 + 1`
            continue
        fi
    elif [ $lib = "EV" ]; then
        env PERL_MM_USE_DEFAULT=1 \
          ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> \
          ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if [ $? -ne 0 ]; then
            tee -a ${BUILD_PATH}/${BUILD_LOG}
            exit 3
        else
            step6=`expr $step6 + 1`
            continue
        fi
    else
        ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if [ $? -ne 0 ]; then
            echo "Error: $lib installation failed !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            exit 3
        else
            step6=`expr $step6 + 1`
        fi
    fi
done

# there are 53 perl modules install calls
step6=`expr $step6 / 53`


# final check; all 6 steps
rep_perl_done=`expr $step1 + $step2 + $step3 + $step4 + $step5 + $step6`
if [ "$rep_perl_done" -eq 6 ]; then
   rep_perl_done=1
else
   rep_perl_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: Perl Module:  XML::LibXML                            #
# ############################################################### #

build_rep_xmllibxml() {

dir=XML-LibXML
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env LD_LIBRARY_PATH=/usr/local/lib ${iprefix}/perl/bin/perl Makefile.PL XMLPREFIX=/usr/local >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#env LD_LIBRARY_PATH=${iprefix}/lib ${iprefix}/perl/bin/perl Makefile.PL XMLPREFIX=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

#
# final check; all 4 steps
rep_perllxml_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $rep_perllxml_done -eq 4 ]; then
   rep_perllxml_done=1
else
   rep_perllxml_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Reporting: Perl Module: DBD::Pg                                 #
# ############################################################### #

build_rep_dbdpg() {

dir=dbdpg
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:$PATH ${iprefix}/perl/bin/perl Makefile.PL  >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

cp ../Makefile.good Makefile
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

#
# final check; all 4 steps
rep_dbdpg_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $rep_dbdpg_done -eq 4 ]; then
   rep_dbdpg_done=1
else
   rep_dbdpg_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: FCGI Build Phase                                     #
# ############################################################### #

build_rep_fcgi() {
dir=fcgi
step1=0
step2=0
step3=0
step4=0


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
rep_fcgi_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $rep_fcgi_done -eq 4 ]; then
   rep_fcgi_done=1
else
   rep_fcgi_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: FCGIWRAP Build Phase                                 #
# ############################################################### #

build_rep_fcgiwrap() {
dir=fcgiwrap
step1=0
step2=0
step3=0

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
# echo "iprefix=$iprefix"
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
cp Makefile.${OS_NAME} Makefile
make iprefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi 

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ ! -d ${iprefix}/share/man/man8 ]; then
    mkdir -p ${iprefix}/share/man/man8
fi

make iprefix=${iprefix} install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install fcgiwrap failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# final check; all 3 steps
rep_fcgiw_done=`expr $step1 + $step2 + $step3`
if [ $rep_fcgiw_done -eq 3 ]; then
   rep_fcgiw_done=1
else
   rep_fcgiw_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Reporting: WS Build Phase                                       #
# ############################################################### #

build_rep_ws() {
dir=ws
step1=0
step2=0
step3=0
step4=0


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

# copy the fair plugin
cp -pr ../../upstream .

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

 env PKG_CONFIG_PATH=/usr/local/libdata/pkgconfig   \
     CC=cc CFLAGS="-O3"                             \
    ./configure --prefix=${iprefix} --with-ipv6    \
    --with-perl=${iprefix}/perl/bin                \
    --with-http_ssl_module                         \
    --with-http_stub_status_module                 \
    --with-http_realip_module                      \
    --with-http_flv_module                         \
    --with-http_gzip_static_module                 \
    --with-cc-opt="-I${iprefix}/include -I/usr/local/include"           \
    --with-ld-opt="-L${iprefix}/lib -L/usr/local/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    --add-module=upstream \
    --http-client-body-temp-path=logs/client_body_temp   \
    --http-proxy-temp-path=logs/proxy_temp         \
    --http-fastcgi-temp-path=logs/fastcgi_temp       \
    --http-uwsgi-temp-path=logs/uwsgi_temp         \
    --http-scgi-temp-path=logs/scgi_temp >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
rep_ws_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $rep_ws_done -eq 4 ]; then
   rep_ws_done=1
else
   rep_ws_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: OpenResty Build Phase                                #
# ############################################################### #

build_rep_openresty() {
dir=openresty
step1=0
step2=0
step3=0
step4=0


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

 env PKG_CONFIG_PATH=/usr/local/libdata/pkgconfig \
     CC=cc ./configure --prefix=${iprefix} --with-luajit \
     --with-cc=/usr/bin/cc >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
gmake >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


gmake install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
rep_openresty_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $rep_openresty_done -eq 4 ]; then
   rep_openresty_done=1
else
   rep_openresty_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}




# ############################################################### #
# Reporting: R Build Phase                                        #
# ############################################################### #
build_rep_R() {
dir=R
step1=0
step2=0
step3=0
step4=0


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH CC=cc \
    PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig      \
    CFLAGS="-std=gnu99 -O3 -I${iprefix}/include"  \
    CPPFLAGS="-I${iprefix}/include -I${iprefix}/include/readline" \
    FFLAGS="-O3 -I${iprefix}/include"             \
    FCFLAGS="-O3 -I${iprefix}/include"            \
    CXXFLAGS="-O3 -I${iprefix}/include"           \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
            -Wl,-rpath -Wl,${iprefix}/R/lib64"   \
    ./configure --enable-R-shlib --with-x \
     --prefix=${iprefix}/R >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step4=1
fi

# set the sym links
if [ ! -d ${iprefix}/R/lib64 ]; then
    ln -s ${iprefix}/R/lib/R/lib/libRblas.so ${iprefix}/R/lib/libRblas.so
    ln -s ${iprefix}/R/lib/R/lib/libRlapack.so ${iprefix}/R/lib/libRlapack.so
    ln -s ${iprefix}/R/lib/R/lib/libRblas.so ${iprefix}/lib/libRblas.so
    ln -s ${iprefix}/R/lib/R/lib/libRlapack.so ${iprefix}/lib/libRlapack.so
    ln -s ${iprefix}/R/lib/R/lib/libR.so ${iprefix}/lib/libR.so
else
    ln -s ${iprefix}/R/lib64/R/lib/libRblas.so ${iprefix}/R/lib64/libRblas.so
    ln -s ${iprefix}/R/lib64/R/lib/libRlapack.so ${iprefix}/R/lib64/libRlapack.so
    ln -s ${iprefix}/R/lib64/R/lib/libRblas.so ${iprefix}/lib/libRblas.so
    ln -s ${iprefix}/R/lib64/R/lib/libRlapack.so ${iprefix}/lib/libRlapack.so
    ln -s ${iprefix}/R/lib64/R/lib/libR.so ${iprefix}/lib/libR.so
fi    

# final check; all 4 steps
rep_rsts_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $rep_rsts_done -eq 4 ]; then
   rep_rsts_done=1
else
   rep_rsts_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Reporting: Scripts                                              #
# ############################################################### #

# init.nginx-fcgi
# nginx-fcgi.pl
# nginx-fcgi.x86.boot
# htpasswd

build_rep_ws_scripts() {

dir=wsscripts
step1=0
step2=0


cd $dir/${OS_NAME}
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing nginx wrappers ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp *nginx* htpasswd ${iprefix}/sbin
if [ $? -ne 0 ]; then
    echo "Error: cannot install nginx scripts !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi


# final check; all 2 steps
rep_wsscripts_done=$step1
if [ $rep_wsscripts_done -eq 1 ]; then
   rep_wsscripts_done=1
else
   rep_wsscripts_done=90
fi


cd ../..

}


# ############################################################### #
# Reporting: PDQ Build Phase                                      #
# ############################################################### #

build_rep_pdq() {
dir=pdq
step1=0
step2=0
step3=0
step4=0
step5=0


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
echo "Info: Step 1 - Make PDQ lib..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# clean general
make clean >> ${BUILD_PATH}/${BUILD_LOG} 2>&1


cd lib
# cleaning all object files
make -f Makefile.linux clean >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

# build lib
make -f Makefile.linux >> ${BUILD_PATH}/${BUILD_LOG} 2>&1   
if [ $? -ne 0 ]; then
    echo "Error: make pdq/lib $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi 


# STEP 2
echo "Info: Step 2 - Make PDQ perl5 lib..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cd ../perl5
# cleaning all object files
make clean >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

# copy .so and .o
cp ../lib/*.o .
cp ../lib/*.so .

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1   
if [ $? -ne 0 ]; then
    echo "Error: make pdq/perl5 $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "Info: Step 3 - Make PDQ perl5 install..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1   
if [ $? -ne 0 ]; then
    echo "Error: make install pdq/perl5 $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
echo "Info: Step 4 - Make PDQ perl5 test..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1   
if [ $? -ne 0 ]; then
    echo "Error: make test pdq/perl5 $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

cd ..

# STEP 5
echo "Info: Step 5 - Make PDQ R lib..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cd R
cp ../lib/*.[ch] pdq/src
cp ../lib/P*.[h] pdq/lib/

${iprefix}/R/bin/R CMD INSTALL pdq >> ${BUILD_PATH}/${BUILD_LOG} 2>&1   
if [ $? -ne 0 ]; then
    echo "Error: make pdq/R $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi


# final check; all 4 steps
rep_pdq_done=`expr $step1 + $step2 + $step3 + $step4 + $step5`
if [ $rep_pdq_done -eq 5 ]; then
   rep_pdq_done=1
else
   rep_pdq_done=90
fi

cd ../..

}



# ############################################################### #
# Reporting: WWW::Curl Phase                                      #
# ############################################################### #
build_rep_wcurl() {

dir=WWW-Curl
step1=0
step2=0
step3=0
step4=0

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
# echo "Archive: $archive_file"
# echo "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi



# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


#
# final check; all 4 steps
rep_wcurl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $rep_wcurl_done -eq 4 ]; then
   rep_wcurl_done=1
else
   rep_wcurl_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: R module: Cairo                                      #
# ############################################################### #
build_rep_rcairo() {

dir=rcairo
step1=0
step2=0
step3=0
step4=0


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls *.tar.gz`

# STEP 1

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Install $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi


#
# final check; 1 step
rep_rcairo_done=$step1
if [ $rep_rcairo_done -eq 1 ]; then
   rep_rcairo_done=1
else
   rep_rcairo_done=90
fi

cd ..

}


# ############################################################### #
# Reporting: R module: ggplot2                                    #
# ############################################################### #
build_rep_rggplot2() {
dir=rggplot2
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0
step7=0
step8=0
step9=0
step10=0
step11=0
step12=0
step13=0
step14=0
step15=0
step16=0
step17=0

# we build here ggplot2 for R
# order: 
# iterators, itertools, plyr, reshape, RColorBrewer, digest, colorspace, proto, ggplot2


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Install iterators $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls iterator*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi



# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install itertools $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls itertool*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi



# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Install plyr $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls plyr*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi



# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Install reshape $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls reshape*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi



# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Install RColorBrewer $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls RColorBrewer*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi



# STEP 6
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 6 - Install digest $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls digest*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step6=1
fi



# STEP 7
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 7 - Install colorspace $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls colorspace*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step7=1
fi


# STEP 8
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 8 - Install proto $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls proto*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step8=1
fi


# STEP 9
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 9 - Install stringr $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls stringr*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step9=1
fi


# STEP 10
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 10 - Install reshape2 $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls reshape2*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step10=1
fi


# STEP 11
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 11 - Install dichromat $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls dichromat*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step11=1
fi


# STEP 12
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 12 - Install munsell  $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls munsell*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step12=1
fi


# STEP 13
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 13 - Install labeling $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls labeling*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step13=1
fi


# STEP 14
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 14 - Install scales $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls scales*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step14=1
fi


# STEP 15
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 15 - Install memoise $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls memoise*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step15=1
fi


# STEP 16
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 16 - Install gtable $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls gtable*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step16=1
fi


# STEP 17
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 17 - Install ggplot2 $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls ggplot*.tar.gz`
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig CC=cc \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step17=1
fi


#
# final check; 1 step
rep_rggplot2_done=`expr $step1 + $step2 + $step3 + $step4 + $step5  + \
                       $step6 + $step7 + $step8 + $step9 + $step10 + \
                       $step11 + $step12 + $step13 + $step14      + \
                       $step15 + $step16 + $step17`
if [ $rep_rggplot2_done -eq 17 ]; then
   rep_rggplot2_done=1
else
   rep_rggplot2_done=90
fi

cd ..

}


# ############################################################### #
# Reporting: R module: rserve                                     #
# ############################################################### #
build_rep_rserve() {
dir=rserve
step1=0
step2=0
step3=0

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Install Rserve $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls Rserve_*.tar.gz`
env PATH=${iprefix}/bin:$PATH CC=cc \
    PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL --configure-vars="LIBS=-L${iprefix}/lib CPPFLAGS=-I${iprefix}/include" $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi



# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install FastRWeb $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls FastRWeb*.tar.gz`

env PATH=${iprefix}/bin:$PATH CC=cc \
    PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi



# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Install XML $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

archive_file=`ls XML*.tar.gz`
env PATH=${iprefix}/bin:$PATH CC=cc \
    PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig  \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi



# final check; 1 step
rep_rserve_done=`expr $step1 + $step2 + $step3`
if [ $rep_rserve_done -eq 3 ]; then
   rep_rserve_done=1
else
   rep_rserve_done=90
fi

cd ..

}


# ############################################################### #
# Reporting: R module: ranalysis PCA, TimeSeries                  #
# ############################################################### #
build_rep_ranalysis() {
dir=ranalysis
step=0
cnt=1

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
for rmod in Formula sca survival Hmisc mvtnorm mnormt pbivnorm quadprog \
    boot MASS chron zoo timeDate its tseries fracdiff leaps \
    scatterplot3d randomForest
do
    echo "Info: Step $cnt - Install $rmod for $dir ..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}

    archive_file=`ls ${rmod}*.tar.gz`

    env PATH=${iprefix}/bin:$PATH CC=cc \
        PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
        ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

    if [ $? -ne 0 ]; then
        echo "Error: configure $dir failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step=`expr $step + 1`
    fi
    cnt=`expr $cnt + 1`
done

# final check; 1 step
rep_ranalysis_done=$step
if [ $rep_ranalysis_done -eq 19 ]; then
   rep_ranalysis_done=1
else
   rep_ranalysis_done=90
fi

cd ..

}


# ############################################################### #
# Reporting: Finalize                                             #
# ############################################################### #

# hostadm, sdr conf
# rrdcached dirs
# docroot setup
# FastWebR setup

build_rep_fin() {

dir=scripts
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0
step7=0

# export iprefix
export iprefix=${iprefix}


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing hostadm ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp hostadm ${iprefix}/bin
if [ $? -ne 0 ]; then
    echo "Error: cannot install hostadm script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi

# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Installing sdr.conf ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ ! -d ${iprefix}/etc ]; then
    mkdir ${iprefix}/etc
fi
cp etc/sdr etc/init.sdr etc/*.xml ${iprefix}/etc
if [ $? -ne 0 ]; then
    echo "Error: cannot install etc scripts !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Installing docroot ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ ! -d ${iprefix}/docroot ]; then

    mkdir -p ${iprefix}/docroot
    if [ $? -ne 0 ]; then
        echo "Error: cannot install db !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step3=1
    fi
fi

# cd docroot
# wksp=$(pwd)

# cd ${iprefix}/docroot
# tar xvf ${wksp}/content.tar >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

# cd ${wksp}
# cd ..


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Installing db ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

for db in sys cpu nic disk net jvm web
do
    mkdir -p ${iprefix}/db/${db}
    if [ $? -ne 0 ]; then
        echo "Error: cannot install db !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step4=`expr $step4 + 1`
    fi
done

# there are 7 dbs to setup
step4=`expr $step4 / 7`



# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Installing rrdcached dirs ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# setup rrdcached
if [ ! -d ${iprefix}/var/cache/rrdcached/journal ]; then
    mkdir -p ${iprefix}/var/cache/rrdcached/journal
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup var rrdcached !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step5=`expr $step5 + 1`
    fi
fi

if [ ! -d ${iprefix}/var/log ]; then
    mkdir ${iprefix}/var/log
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup var log !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step5=`expr $step5 + 1`
    fi
fi

if [ ! -d ${iprefix}/var/run ]; then
    mkdir ${iprefix}/var/run
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup var run !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step5=`expr $step5 + 1`
    fi
fi

# there are 3 var dirs to setup
step5=`expr $step5 / 3`


# STEP 6
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 6 - Installing nginx configs ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f ${iprefix}/conf/nginx.conf ]; then
    cp ${iprefix}/conf/nginx.conf ${iprefix}/conf/nginx.conf.original
fi

cp etc/nginx.conf ${iprefix}/conf
if [ $? -ne 0 ]; then
    echo "Error: cannot setup nginx configs !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step6=`expr $step6 + 1`
fi


cp etc/htpasswd ${iprefix}/conf
if [ $? -ne 0 ]; then
    echo "Error: cannot setup nginx configs !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step6=`expr $step6 + 1`
fi  


# there are 2 configs
step6=`expr $step6 / 2`


# STEP 7
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 7 - Configuring FastRWeb configs ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# set the sym links
if [ -d ${iprefix}/R ]; then

    if [ -d ${iprefix}/R/lib64 ]; then
        cd ${iprefix}/R/lib64/R/library/FastRWeb
    else
        cd ${iprefix}/R/lib/R/library/FastRWeb
    fi

    if [ ! -d ${iprefix}/var/FastRWeb ]; then
        if [ -f install.sh ]; then
            ${iprefix}/perl/bin/perl -pi -e \
             's/\=\/var\/FastRWeb/\=$ENV{iprefix}\/var\/FastRWeb/' \
             install.sh code/start

            ${iprefix}/perl/bin/perl -pi -e \
             's/\s\/var\/FastRWeb/ $ENV{iprefix}\/var\/FastRWeb/' \
              code/rserve.conf

            ${iprefix}/perl/bin/perl -pi -e \
             's/\"\/var\/FastRWeb/\"$ENV{iprefix}\/var\/FastRWeb/' code/rserve.R
    
            if [ ! -d ${iprefix}/var/FastRWeb ]; then
                mkdir ${iprefix}/var/FastRWeb
            fi
            ./install.sh >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

            if [ $? -ne 0 ]; then
                echo "Error: cannot run FastRWeb install.sh !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
                rm /var/tmp/build.${module}
                exit 3
            else
               step7=`expr $step7 + 1`
            fi
        else
            echo "Error: cannot find install.sh FastRWeb !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            exit 3
        fi
    fi
fi

# final check; all 7 steps
rep_fin_done=`expr $step1 + $step2 + $step3 + $step4 + $step5 + $step6 + $step7`
if [ "$rep_fin_done" -eq 7 ]; then
   rep_fin_done=1
else
   rep_fin_done=90
fi

cd ..

}
