#!/bin/sh
#
#  Kronometrix Development tools, Linux recording engine 
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 2

# ############################################################### #
# Engine: Linux                                                   # 
# ############################################################### #


### extract_archive
extract_archive() {

# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# echo "module name: $modfile"
# echo "archive dir: $bfile"

if [ -d $bfile ]; then
    echo "Info: Step 1 - Extracting $bfile ..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
    echo "Warning: ${bfile} directory found, cleaning..." | tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean. Check ${modfile} , ${bfile}" | tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG}
else
    echo "Info: Step 1 - Extracting $bfile ..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG}
fi

}


### init_module
init_module() {

# $1 directory name
directory=$1

cd $directory
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $directory" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
#echo "Directory: $directory"
#echo "Archive: $archive_file"

# dirarchive=${archive_file%%.tar*}
dirarchive=`echo $archive_file | sed 's/\.tar.*//'`

# Debug
#echo "DirArchive: $dirarchive"

extract_archive "$directory" "$dirarchive"

cd $dirarchive

}


### clean_module
clean_module() {
cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


### perl
build_rec_perl() {
dir=perl
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0

init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# get CPAN version
cpanver=`echo $dirarchive | sed 's/perl-//'`

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure perl ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitall \
        -Dcf_by="support@systemdatarecorder.org"       \
        -Dcf_email="support@systemdatarecorder.org"    \
        -Dman1dir="none" -Dman3dir="none"        \
        -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitint \
        -Dcf_by="support@systemdatarecorder.org"       \
        -Dcf_email="support@systemdatarecorder.org"    \
        -Dman1dir="none" -Dman3dir="none"        \
        -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make test perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make test perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Make install perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
if [ -d ${iprefix}/perl ]; then
    echo "Warning: perl directory found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm -rf ${iprefix}/perl
    if [ $? -ne 0 ]; then
        echo "Error: cleaning $dir directory" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
fi
 
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi

           
# STEP 6
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 6 - CPAN modules" | tee -a ${BUILD_PATH}/${BUILD_LOG}

cp ${BUILDER_PREFIX}/etc/Config.pm ${iprefix}/perl/lib/${cpanver}/CPAN

${iprefix}/perl/bin/perl -MCPAN -e 'install Sys::Statistics::Linux' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: Sys::Statistics::Linux installation failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step6=`expr $step6 + 1`
fi

for lib in Digest::SHA Proc::Daemon Proc::PID::File File::Tail \
           JSON::XS JSON HTTP::Response Data::UUID Carp::Assert \
           Inline::MakeMaker
do
    if  [ "$lib" = "JSON::XS" -o "$lib" = "Inline::MakeMaker" ]; then
        env PERL_MM_USE_DEFAULT=1 \
        ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if [ $? -ne 0 ]; then
            echo "Error: $lib installation failed !" |\
                tee -a ${BUILD_LOG}/${module}.${version}.log
            rm /var/tmp/build.${module}
            exit 3
        else
            step6=`expr $step6 + 1`
            continue
        fi
    else
        ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if [ $? -ne 0 ]; then
            echo "Error: $lib installation failed !" |\
                tee -a ${BUILD_LOG}/${module}.${version}.log
            rm /var/tmp/build.${module}
            exit 3
        else
            step6=`expr $step6 + 1`
            continue
        fi
    fi
done

# there are 11 perl modules install calls 
step6=`expr $step6 / 11`

# final check; all 6 steps
perl_done=`expr $step1 + $step2 + $step3 + $step4 + $step5 + $step6`
if [ "$perl_done" -eq 6 ]; then
   perl_done=1
else
   perl_done=90
fi

clean_module

}


### openssl
build_rec_ossl() {
dir="openssl"
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
     ./Configure linux-x86_64 threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
elif [ "$PT_NAME" = "armv6l" ]; then
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
     ./Configure linux-armv4 threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
     ./Configure linux-elf threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

echo "Fixing SHARED_LDFLAGS flag..." >> ${BUILD_PATH}/${BUILD_LOG}
if [ "$PT_NAME" = "x86_64" ]; then
    sed "s:^SHARED_LDFLAGS=.*:SHARED_LDFLAGS=-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
else
    sed "s:^SHARED_LDFLAGS=.*:SHARED_LDFLAGS=-m32 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
fi

if [ $? -ne 0 ]; then
    echo "Error: fixing SHARED_LDFLAGS Makefile failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi
mv Makefile.tmp Makefile


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
ossl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$ossl_done" -eq 4 ]; then
   ossl_done=1
else
   ossl_done=90
fi

clean_module

# back to root
cd ..

}


### libidn
build_rec_idn() {
dir=idn
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then 
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
        -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib\
        -L/lib -L/usr/lib" ./configure \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
idn_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$idn_done" -eq 4 ]; then
   idn_done=1
else
   idn_done=90
fi

clean_module

# back to root
cd ..

}


### libusb
build_rec_libusb() {
dir=libusb
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install libusb failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
lubusb_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$libusb_done" -eq 4 ]; then
   libusb_done=1
else
   libusb_done=90
fi

clean_module

# back to root
cd ..

}


### perl Device::USB
build_rec_deviceusb() {

dir=Device-USB
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

export LIBUSB_INCDIR=${iprefix}/include
export LIBUSB_LIBDIR=${iprefix}/lib

${iprefix}/perl/bin/perl Makefile.PL LDDLFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

## final check; all 4 steps
deviceusb_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$deviceusb_done" -eq 4 ]; then
   deviceusb_done=1
else
   deviceusb_done=90
fi

clean_module

# back to root
cd ..

}


### curl
build_rec_curl() {
dir=curl
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
#env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig:/usr/lib64/pkgconfig \
env CFLAGS="-O3" \
    CPPFLAGS="-I${iprefix}/include"   \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --with-ssl=${iprefix} --with-libidn=${iprefix} \
     --prefix=${iprefix} --enable-cookies --enable-nonblocking \
     --without-libssh2 --disable-ldap --disable-ldaps >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f ${iprefix}/bin/curl ]; then
    echo "Warning: $dir binary found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm ${iprefix}/bin/curl
    rm ${iprefix}/bin/curl-config
    if [ $? -ne 0 ]; then
        echo "Error: cleaning idn binary failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

fi

if [ -d ${iprefix}/lib ]; then
    echo "Warning: lib directory found..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    for f in $(find ${iprefix}/lib -name '*curl*')
    do
        echo "Cleaning file: $f..." |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm $f
        if [ $? -ne 0 ]; then
            echo "Error: cleaning lib $f file failed !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    done
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
curl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$curl_done" -eq 4 ]; then
   curl_done=1
else
   curl_done=90
fi

clean_module

# back to root
cd ..

}


### perl WWW::Curl
build_rec_wcurl() {

dir=WWW-Curl
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


env PATH=${iprefix}/bin:$PATH ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
sed "s:^LDFLAGS =  -fstack-protector -L/usr/local/lib:LDFLAGS = -fstack-protector -L${iprefix}/lib -L/usr/local/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp

mv Makefile.tmp Makefile
sed "s:^LDDLFLAGS = -shared -O3 -L/usr/local/lib -fstack-protector:LDDLFLAGS = -shared -O3 -fstack-protector -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

## final check; all 4 steps
wwwcurl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$wwwcurl_done" -eq 4 ]; then
   wwwcurl_done=1
else
   wwwcurl_done=90
fi

clean_module

# back to root
cd ..

}


### sysstat
build_rec_sysstat() {
dir=sysstat
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    env CC=cc CFLAGS="-O3" LDFLAGS="-L/lib64 -L/usr/lib64 -Wl,-rpath -Wl,${iprefix}/lib" ./configure \
     man_group=krmx sa_dir=/opt/kronometrix/log conf_dir=/opt/kronometrix/etc  \
     --prefix=/opt/kronometrix --disable-documentation --disable-nls >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env CC=cc CFLAGS="-O3" LDFLAGS="-L/lib -L/usr/lib -Wl,-rpath -Wl,${iprefix}/lib" ./configure \
     man_group=krmx sa_dir=/opt/kronometrix/log conf_dir=/opt/kronometrix/etc  \
     --prefix=/opt/kronometrix --disable-documentation --disable-nls >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

if [ -d ${iprefix}/share/doc ]; then
    rm -rf ${iprefix}/share/doc
fi


# final check; all 4 steps
sysstat_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$sysstat_done" -eq 4 ]; then
   sysstat_done=1
else
   sysstat_done=90
fi

clean_module

# back to root
cd ..
}


### configuration settings
build_rec_scripts() {

dir=bin
step1=0
step2=0

cd ${dir}
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing setenv ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f setenv ]; then
    cp setenv  ${iprefix}/bin
    if [ $? -ne 0 ]; then
        echo "Error: cannot install setenv script !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
else
    echo "Error: setenv missing, check workspace !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

cd ${OS_NAME}
# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Installing recorders ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


#nrecs=`ls *rec | wc -l`

#if [ "$nrecs" -ne 10 ]; then
#    echo "Error: wrong no. of recorders, check workspace !" |\
#     tee -a ${BUILD_PATH}/${BUILD_LOG}
#    rm /var/tmp/build.${module}
#    exit 3
#else
    if [ "$PT_NAME" != "armv6l" ]; then
        cp *rec ${iprefix}/bin
        if [ $? -ne 0 ]; then
            echo "Error: cannot install rec scripts !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step2=1
        fi
    else
        cp sysrec cpurec diskrec nicrec hdwrec ${iprefix}/bin
        if [ $? -ne 0 ]; then
            echo "Error: cannot install rec scripts !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step2=1
        fi

    fi
#fi

# set the other bins
cp sender ${iprefix}/bin
if [ $? -ne 0 ]; then
    echo "Error: cannot install additional bins !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# set etc settings
cd ../..
cp etc/${OS_NAME}/* ${iprefix}/etc
cp etc/*.start ${iprefix}/etc
cp etc/kronometrix.json ${iprefix}/etc
cp etc/kronometrix ${iprefix}/etc
cp etc/kronometrix.transport ${iprefix}/etc
if [ $? -ne 0 ]; then
    echo "Error: cannot install etc settings !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# final check; all 2 steps
recs_done=`expr $step1 + $step2`
if [ "$recs_done" -eq 2 ]; then
   recs_done=1
else
   recs_done=0
fi

# set man pages
if [ ! -d ${iprefix}/man ]; then
    mkdir ${iprefix}/man
fi

cp -pr man/${OS_NAME}/* ${iprefix}/man
if [ $? -ne 0 ]; then
    echo "Error: cannot install man pages !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# link man to share man
ln -s ${iprefix}/share/man/man3 ${iprefix}/man
ln -s ${iprefix}/share/man/man8 ${iprefix}/man
ln -s ${iprefix}/share/man/man5 ${iprefix}/man
for man in $(ls ${iprefix}/share/man/man1)
do
    ln -s ${iprefix}/share/man/man1/${man} ${iprefix}/man/man1
done 


# set release notes
cp release.notes.${OS_NAME} ${iprefix}/release.notes
if [ $? -ne 0 ]; then
    echo "Error: cannot install release.notes !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set README 
cp README.${OS_NAME} ${iprefix}
if [ $? -ne 0 ]; then
    echo "Error: cannot install README.${OS_NMAE} !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set log directory
if [ ! -d ${iprefix}/log ]; then
    # setup daily log
    mkdir -p ${iprefix}/log/daily
    if [ $? -ne 0 ]; then
        echo "Error: cannot set log/daily director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

    # setup current log
    mkdir -p ${iprefix}/log/current
    if [ $? -ne 0 ]; then
        echo "Error: cannot set log/current director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
else
    # we have log dir, check daily, raw
    if [ ! -d ${iprefix}/log/daily ]; then 
        mkdir ${iprefix}/log/daily
        if [ $? -ne 0 ]; then
            echo "Error: cannot set log/daily director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi

    if [ ! -d ${iprefix}/log/current ]; then 
        mkdir ${iprefix}/log/current
        if [ $? -ne 0 ]; then
            echo "Error: cannot set log/current director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi
fi


}


### testing
test_rec_scripts() {

dir=tests
step1=0
step2=0


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
# Check all recorders if they are sane and execute properly

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Check recorders" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

. ${iprefix}/bin/setenv
for r in sys cpu disk nic hdw
do
    echo "" >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    echo "Executing ${r}rec" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    ${KRMX_BIN}/${r}rec >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    #fi
    if [ $? -ne 0 ]; then
        echo "Error: cannot run ${r}rec !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
done

step1=`expr $step1 / 6`

# STEP 2
# Check all shared libs if they are build correctly

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Check libs" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

noErrors=0
for lib in `ls ${iprefix}/lib/*.so`
do
    noErrors=`ldd $lib | grep 'not found' | wc -l`
    if [ "$noErrors" -ne 0 ]; then
        echo "LIB ERROR: $lib" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        noErrors=`expr $noErrors + 1`
    fi
done

if [ "$noErrors" -eq 0 ]; then
    step2=1
fi


# final check; all 4 steps
tests_done=`expr $step1 + $step2` 
if [ "$tests_done" -eq 2 ]; then
   tests_done=1
else
   tests_done=90
fi

cd ..

}


### rpm macro configuration file
make_rpmmacro() {

cat > ~/.rpmmacros << "EOF"
%packager       Support Kronometrix
%vendor         Kronometrix

%_topdir        %(echo $HOME)/workspace/kronometrix/recording/pkg/rpm
%_tmppath       %{_topdir}/tmp
%_sourcedir     %{_topdir}/SOURCES/%{name}-%{version}
%_rpmfilename   %{name}-%{version}-%{arch}.rpm
%_specdir       %{_topdir}/SPECS
%_builddir      %{_topdir}/BUILD
%_rpmdir        %{_topdir}/RPMS
EOF

}


### tar package
build_rec_tar_pkg() {

step1=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd ${iprefix}/..

if [ "$buildno" -ne 0 ]; then
    tar cf /var/tmp/kronometrix-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar kronometrix/
    if [ -f /var/tmp/kronometrix-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        rm /var/tmp/kronometrix-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2
    fi
    bzip2 /var/tmp/kronometrix-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar
    if [ $? -ne 0 ]; then
        echo "Error: cannot create kronometrix data recording package !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
else
    # GA General Release
    tar cf /var/tmp/kronometrix-${krmxver}-${DIST_ID}.${PT_NAME}.tar kronometrix/
    if [ -f /var/tmp/kronometrix-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        rm /var/tmp/kronometrix-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2
    fi
    bzip2 /var/tmp/kronometrix-${krmxver}-${DIST_ID}.${PT_NAME}.tar
    if [ $? -ne 0 ]; then
        echo "Error: cannot create kronometrix data recording package !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
fi

# final check; 1 step
tar_pkg_done=$step1
if [ "$tar_pkg_done" -eq 1 ]; then
   tar_pkg_done=1
else
   tar_pkg_done=90
fi

cd ${WORKSPACE}/${module}

}


### rpm package
build_rec_rpm_pkg() {

dir='pkg/rpm'
step1=0
step2=0
step3=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: rpm package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Prepare SOURCE stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


if [ ! -d SPECS ]; then
    echo "Error: cannot find SPECS directory, missing spec file !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

if [ ! -d SOURCES ]; then
    mkdir SOURCES
fi

if [ ! -d SRPMS ]; then
    mkdir SRPMS
fi

if [ ! -d BUILD ]; then
    mkdir BUILD
fi

if [ ! -d RPMS ]; then
    mkdir RPMS
fi

if [ ! -d tmp ]; then
    mkdir tmp
fi

# prepare SOURCES
if [ ! -d "SOURCES/kronometrix-${krmxver}" ]; then
    mkdir "SOURCES/kronometrix-${krmxver}"
fi

if [ "$buildno" -ne 0 ]; then
    # Version: 1.0.0
    # Release: b10
    # get control file fixed correct build and version
    sed "s/^Version.*/Version: ${krmxver}/" SPECS/kronometrix > SPECS/kronometrix.tmp
    mv SPECS/kronometrix.tmp SPECS/kronometrix
    sed "s/^Release.*/Release: b${buildno}/" SPECS/kronometrix > SPECS/kronometrix.tmp
    mv SPECS/kronometrix.tmp SPECS/kronometrix


    if [ -f /var/tmp/kronometrix-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        cp /var/tmp/kronometrix-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 \
           SOURCES/kronometrix-${krmxver}/kronometrix-${krmxver}-${PT_NAME}.tar.bz2
        if [ $? -ne 0 ]; then
            echo "Error: cannot copy tar archive to SOURCE directory !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step1=1
        fi
    fi
else

    sed "s/^Version.*/Version: ${krmxver}/" SPECS/kronometrix > SPECS/kronometrix.tmp
    mv SPECS/kronometrix.tmp SPECS/kronometrix
    sed "s/^Release.*/Release: 0/" SPECS/kronometrix > SPECS/kronometrix.tmp
    mv SPECS/kronometrix.tmp SPECS/kronometrix

    if [ -f /var/tmp/kronometrix-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        cp /var/tmp/kronometrix-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 \
            SOURCES/kronometrix-${krmxver}/kronometrix-${krmxver}-${PT_NAME}.tar.bz2
        if [ $? -ne 0 ]; then
            echo "Error: cannot copy tar archive to SOURCE directory !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step1=1
        fi
    fi
fi


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Build rpm package" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f $HOME/.rpmmacros ]; then
    STAMP=`date +"%Y%m%d_%H%M%S"`
    mv $HOME/.rpmmacros $HOME/.rpmmacros.${STAMP}
    make_rpmmacro
else
    make_rpmmacro
fi


if [ -f SPECS/kronometrix ]; then

    rpmbuild -bb ./SPECS/kronometrix >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: cannot build rpm, rpmbuild error !" |\
            tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step2=1
    fi
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Cleanup rpm stage directories" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f RPMS/kronometrix-${krmxver}-${PT_NAME}.rpm ]; then
   cp RPMS/kronometrix-${krmxver}-${PT_NAME}.rpm /var/tmp
   # cleanup
   if [ $? -eq 0 ]; then 
       rm -rf RPMS SOURCES SRPMS BUILD tmp
       rm $HOME/.rpmmacros
       step3=1
   fi
fi


# final check; 3 steps
rpm_pkg_done=`expr $step1 + $step2 + $step3`
if [ "$rpm_pkg_done" -eq 3 ]; then
   rpm_pkg_done=1
else
   rpm_pkg_done=90
fi

cd ../..

}


### deb package
build_rec_deb_pkg() {

dir='pkg/deb'
step1=0
step2=0
step3=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: deb package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Create stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    pkgname="kronometrix-${krmxver}-amd64"
else
    pkgname="kronometrix-${krmxver}-${PT_NAME}"
fi

if [ ! -d $pkgname ]; then
    mkdir -p "$pkgname/opt"
    mkdir -p "$pkgname/DEBIAN"
    if [ $? -ne 0 ]; then
        echo "Error: cannot copy tar archive to SOURCE directory !" |\
            tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
fi


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Prepare stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# copy config files
cp changelog prerm copyright preinst postinst $pkgname/DEBIAN
if [ "$PT_NAME" = "x86_64" ]; then
    cp control.amd64 $pkgname/DEBIAN/control
elif [ "$PT_NAME" = "armv6l" ]; then
    cp control.armv6l $pkgname/DEBIAN/control
elif [ "$PT_NAME" = "i386" ]; then
    cp control.i386 $pkgname/DEBIAN/control
fi


# tar package
cd ${pkgname}/opt

if [ "$buildno" -ne 0 ]; then

    # get control file fixed correct build and version
    sed "s/^Version.*/Version:${krmxver}-b${buildno}/" ../../$pkgname/DEBIAN/control > ../../$pkgname/DEBIAN/control.tmp
    mv ../../${pkgname}/DEBIAN/control.tmp ../../${pkgname}/DEBIAN/control

    if [ -f /var/tmp/kronometrix-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        bzcat /var/tmp/kronometrix-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 | tar xf -
        if [ $? -ne 0 ]; then
            echo "Error: cannot untar archive !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step2=1
        fi
    fi
else

    # get control file fixed correct version
    sed "s/^Version.*/Version:${krmxver}/" ../../$pkgname/DEBIAN/control > ../../$pkgname/DEBIAN/control.tmp
    mv ../../${pkgname}/DEBIAN/control.tmp ../../${pkgname}/DEBIAN/control

    if [ -f /var/tmp/kronometrix-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        bzcat /var/tmp/kronometrix-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 | tar xf -
        if [ $? -ne 0 ]; then
            echo "Error: cannot untar archive !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step2=1
        fi
    fi
fi

cd ../..

/usr/bin/dpkg-deb --build $pkgname >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cannot build deb, dpkg-deb error !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=`expr $step2 + 1`
fi

step2=`expr $step2 / 2`


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Cleanup stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -d $pkgname ]; then
    rm -rf $pkgname
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean stage directory !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step3=1
    fi
fi

mv ${pkgname}.deb /var/tmp


# final check; 3 steps
deb_pkg_done=`expr $step1 + $step2 + $step3`
if [ "$deb_pkg_done" -eq 3 ]; then
   deb_pkg_done=1
else
   deb_pkg_done=90
fi

cd ../..

}


build_rec_pkg() {

dir=pkg
step1=0
step2=0


echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: tar package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
# tar package must be created

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Kronometrix tar package" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


case "$DIST_ID" in
    centos|rhel)
        build_rec_tar_pkg
        build_rec_rpm_pkg
    ;;

    debian|ubuntu|raspbian)
        build_rec_tar_pkg
        build_rec_deb_pkg
    ;;
               
    *)
        echo "Not supported Linux distro, check builder"
        exit 3
    ;;
esac


}


