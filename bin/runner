#!/bin/sh
#
#  SDR Development tools, runner the test engine
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 1.4

### Settings
rrdsize=5       # RRD file in MB
rrdcount=5      # RRDs files, count per host per sec
runtime=900     # execution time
interval=5      # vmstat sampling interval

### DO NOT TOUCH
TESTCASE=sdr_release_10
HOSTNAME=`hostname`
FIOBIN="/usr/local/bin/fio"
VMSTATBIN="/usr/bin/vmstat"
TIMESTAMP=`date "+%Y-%m-%dT%H:%M:%S"`


### usage
usage() {
cat << END
Usage: $0 testid iotype blcksz number
Options:
 testid : test id description
 iotype : seqr, seqw, rr, rw, rrw
 blcksz : block size in KB: 4, 8, 16 KB
 number : number of hosts

Note: Runner will use BUILDER_ROOT variable to find out its
components and log files and SDR_LOG for all test data files.
Usually these variables are sourced via setenv master config
script found under SDR Development Tools. No manual actions
required if SDR Devleopment has been properly installed.
END
exit 1

}


### create test fio file
create_fio() {

if [ -d ${RUNNERLOG} ]; then
    mkdir ${RUNNERLOG}/${TESTID}.${TIMESTAMP}
    cd ${RUNNERLOG}/${TESTID}.${TIMESTAMP}
fi

cat <<EOF >$TEMPLATE
[global]
rw=$IOTYPE
thread
size=${IOSIZE}m
directory=$DESTINATION
blocksize=${BLOCKSIZE}k
nrfiles=$rrdcount
runtime=$runtime
time_based
EOF

c=1
while [ $c -le $NHOSTS ]
do
    echo "" >> $TEMPLATE
    echo "[host$c]" >> $TEMPLATE
    echo "directory=${DESTINATION}/${TESTCASE}/${c}" >> $TEMPLATE
    echo "" >> $TEMPLATE
    c=`expr $c + 1`
done

}


### execute vmstat
execute_vmstat() {
    samples=`expr $runtime / $interval`
    ( $VMSTATBIN 5 $samples >> vmstat.${TESTID}.log 2>&1 & )
}


### execute fio
execute_fio() {
    $FIOBIN --output=${TESTID}.log $TEMPLATE
}



### MAIN

# Source Global SDR Settings
PWD=`dirname $0`
. ${PWD}/setenv

# check BUILDER_ROOT
if [ ! -z "$BUILDER_ROOT" ]; then
   RUNNERLOG="${BUILDER_ROOT}/log"
else
   usage
fi

if [ ! -z "$SDR_LOG" ]; then
   DESTINATION="${SDR_LOG}"
else
   usage
fi

# input parameters
if [ "$#" -ne 4 ]; then
  usage
fi

seqr_sem=0
seqw_sem=0
rr_sem=0
rw_sem=0
rrw_sem=0

TESTID=$1
IOTYPE=$2
BLOCKSIZE=$3
NHOSTS=$4

IOSIZE=`expr $rrdsize \\* $rrdcount`

case "$IOTYPE" in

    seqr)
        seqr_sem=1
        IOTYPE=read
    ;;

    seqw)
        seqw_sem=1
        IOTYPE=write
    ;;
        
    rr)
        rr_sem=1
        IOTYPE=randread
    ;;

    rw)
        rw_sem=1
        IOTYPE=randwrite
    ;;

    rrw)
        rrw_sem=1
        IOTYPE=randrw
    ;;

    *)
        usage
    ;;

esac


TEMPLATE="${HOSTNAME}.${IOTYPE}.fio"
STATFILE=".${TESTID}.${IOTYPE}.${HOSTNAME}.run"

# Status File
if [ -f /var/tmp/${STATFILE} ]; then
    echo "Error: currently running, please wait your job terminates"
    exit 1
else
touch /var/tmp/${STATFILE}
fi

### prepare the test directory
if [ ! -d $DESTINATION ]; then
    echo "Error: cannot find destination: $DESTINATION"
else
    if [ ! -d ${DESTINATION}/${TESTCASE} ]; then
        mkdir ${DESTINATION}/${TESTCASE}
    fi
fi

# layout data directory
current=1
while [ $current -le $NHOSTS ]
do
    if [ ! -d ${DESTINATION}/${TESTCASE}/${current} ]; then
        # we make raw data directories
        echo "Making host data dir: $current..."
        mkdir ${DESTINATION}/${TESTCASE}/${current}
    fi
    current=`expr $current + 1`
done


### create fio
create_fio

### execute vmstat
execute_vmstat

### execute fio
execute_fio

# cleanup
if [ -f /var/tmp/${STATFILE} ]; then
    rm /var/tmp/${STATFILE}
fi
