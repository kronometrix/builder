#/bin/sh
#
# Kronometrix Development tools
# Analytics Kernel Aggregates Engine
#
# Copyright (c) 2018, SDR Dynamics, Stefan Parvu
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Source:  https://github.com/kronometrix/auth/blob/master/LICENSE
#
# VERSION: 3.3

# ############################################################### #
# Analytics Kernel FreeBSD                                        #
# ############################################################### #


### extract_archive
extract_archive() {
# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# echo "module name: $modfile"
# echo "archive dir: $bfile"

if [ -d "$bfile" ]; then
    echo "Info: Step 1 - Extracting $bfile ..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    echo "Warning: ${bfile} directory found, cleaning..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean. Check ${modfile} , ${bfile}" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    echo "Info: Step 1 - Extracting $bfile ..." |\
    tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

}


### init_module
init_module() {

# $1 directory name
directory=$1

cd $directory
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $directory" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
#echo "Directory: $directory"
#echo "Archive: $archive_file"

# dirarchive=${archive_file%%.tar*}
dirarchive=`echo $archive_file | sed 's/\.tar.*//'`

# Debug
#echo "DirArchive: $dirarchive"

extract_archive "$directory" "$dirarchive"

cd $dirarchive

}


### clean_module
clean_module() {
cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


### openresty
build_kagg_openresty() {
dir=openresty
step1=0
step2=0
step3=0
step4=0


# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

 env PKG_CONFIG_PATH=/usr/local/libdata/pkgconfig \
     CC=cc ./configure --prefix=${iprefix} --with-luajit \
     --with-cc=/usr/bin/cc >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
gmake >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


gmake install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Installing luajit.so.2 symlink ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
ln -s ${iprefix}/luajit/lib/libluajit-5.1.so.2.1.0 ${iprefix}/luajit/lib/libluajit-5.1.so.2
if [ $? -ne 0 ]; then
    echo "Error: cannot install luajit.so.2 symlink !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi

# final check; all 5 steps
kagg_openresty_done=`expr $step1 + $step2 + $step3 + $step4 + $step5`
if [ $kagg_openresty_done -eq 5 ]; then
   kagg_openresty_done=1
else
   kagg_openresty_done=90
fi

clean_module

}


### redis
build_kagg_redis() {
dir=redis
step1=0
step2=0
step3=0

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Make $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

gmake PREFIX=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

gmake PREFIX=${iprefix} install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi


# final check; all 3 steps
kagg_redis_done=`expr $step1 + $step2 + $step3`
if [ $kagg_redis_done -eq 3 ]; then
   kagg_redis_done=1
else
   kagg_redis_done=90
fi

clean_module

}


### struct
build_kagg_struct() {
dir="struct"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

sed 's/kernel/kernel\/agg/g' makefile > makefile.tmp
mv makefile.tmp makefile

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
cp struct.so ${iprefix}/lualib >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install struct $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# final check; all 3 steps
kagg_struct_done=`expr $step1 + $step2 + $step3`
if [ $kagg_struct_done -eq 3 ]; then
   kagg_struct_done=1
else
   kagg_struct_done=90
fi

clean_module

# back to root
cd ..


}



### lua-zlib
build_kagg_zlib() {
dir="lua-zlib"
step1=0
step2=0
step3=0
step4=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

sed 's/kernel/kernel\/agg/g' Makefile > Makefile.tmp
mv Makefile.tmp Makefile
    
make bsd >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# final check; all 3 steps
kagg_luazlib_done=`expr $step1 + $step2 + $step3`
if [ $kagg_luazlib_done -eq 3 ]; then
   kagg_luazlib_done=1
else
   kagg_luazlib_done=90
fi

clean_module

# back to root
cd ..

}


### zipwriter
build_kagg_zip() {
dir="zipwriter"
step1=0
step2=0

cd lib

init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install zipwriter ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp -R lua/ZipWriter* ${iprefix}/lualib/
if [ $? -ne 0 ]; then
    echo "Error: cannot install zipwriter script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kagg_zipwriter_done=`expr $step1 + $step2`
if [ $kagg_zipwriter_done -eq 2 ]; then
   kagg_zipwriter_done=1
else
   kagg_zipwriter_done=90
fi
    
clean_module

# back to root
cd ..
}


### luafilesystem
build_kagg_fs() {
dir="luafilesystem"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

sed 's/kernel/kernel\/agg/' config > config.tmp
mv config.tmp config

gmake >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
gmake install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# final check; all 3 steps
kagg_luafs_done=`expr $step1 + $step2 + $step3`
if [ $kagg_luafs_done -eq 3 ]; then
   kagg_luafs_done=1
else
   kagg_luafs_done=90
fi

clean_module

# back to root
cd ..

}


### lua-resty-template
build_kagg_template() {
dir="lua-resty-template"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install template.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp -R lib/resty/template* ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install template.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kagg_lua_resty_template_done=`expr $step1 + $step2`
if [ $kagg_lua_resty_template_done -eq 2 ]; then
   kagg_lua_resty_template_done=1
else
   kagg_lua_resty_template_done=90
fi

clean_module

# back to root
cd ..

}



### lua-resty-http
build_kagg_http() {
dir="lua-resty-http"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install http.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp lib/resty/http* ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install http.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kagg_lua_resty_http_done=`expr $step1 + $step2`
if [ $kagg_lua_resty_http_done -eq 2 ]; then
   kagg_lua_resty_http_done=1
else
   kagg_lua_resty_http_done=90
fi

clean_module

# back to root
cd ..

}





### lua-resty-session
build_kagg_session() {
dir="lua-resty-session"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install session.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp lib/resty/session.lua ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install session.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kagg_lua_resty_session_done=`expr $step1 + $step2`
if [ $kagg_lua_resty_session_done -eq 2 ]; then
   kagg_lua_resty_session_done=1
else
   kagg_lua_resty_session_done=90
fi

clean_module

# back to root
cd ..

}


### router.lua
build_kagg_router() {
dir="router.lua"
step1=0
step2=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install router.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp router.lua ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install router.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kagg_lua_router_done=`expr $step1 + $step2`
if [ $kagg_lua_router_done -eq 2 ]; then
   kagg_lua_router_done=1
else
   kagg_lua_router_done=90
fi

clean_module

# back to root
cd ..

}


### date.lua
build_kagg_libdate() {
dir="date"
step1=0
step2=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install date.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp date.lua ${iprefix}/lualib/
if [ $? -ne 0 ]; then
    echo "Error: cannot install date.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kagg_libdate_done=`expr $step1 + $step2`
if [ $kagg_libdate_done -eq 2 ]; then
   kagg_libdate_done=1
else
   kagg_libdate_done=90
fi

clean_module

# back to root
cd ..

}


### lua-resty-http-simple
build_kagg_httpsimple() {
dir="lua-resty-http-simple"
step1=0
step2=0

cd lib

init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install simple.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp -R lib/resty/http ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install simple.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kagg_lua_resty_http_simple_done=`expr $step1 + $step2`
if [ $kagg_lua_resty_http_simple_done -eq 2 ]; then
   kagg_lua_resty_http_simple_done=1
else
   kagg_lua_resty_http_simple_done=90
fi

clean_module

# back to root
cd ..
}


### inspect.lua
build_kagg_inspect() {
dir="inspect.lua"
step1=0
step2=0
step3=0


cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install inspect.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp inspect.lua ${iprefix}/lualib
if [ $? -ne 0 ]; then
    echo "Error: cannot install inspect.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kagg_lua_inspect_done=`expr $step1 + $step2`
if [ $kagg_lua_inspect_done -eq 2 ]; then
   kagg_lua_inspect_done=1
else
   kagg_lua_inspect_done=90
fi

clean_module

# back to root
cd ..

}


### luatz
build_kagg_luatz() {
dir="luatz"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp -R luatz ${iprefix}/lualib
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# final check; all 2 steps
kagg_luatz_done=`expr $step1 + $step2`
if [ $kagg_luatz_done -eq 2 ]; then
   kagg_luatz_done=1
else
   kagg_luatz_done=90
fi

clean_module

# back to root
cd ..

}


### lua-resty-prettycjson
build_kagg_prettycjson() {
dir="lua-resty-prettycjson"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install prettycjson.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp lib/resty/prettycjson.lua ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install prettycjson.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kagg_lua_resty_prettycjson_done=`expr $step1 + $step2`
if [ $kagg_lua_resty_prettycjson_done -eq 2 ]; then
   kagg_lua_resty_prettycjson_done=1
else
   kagg_lua_resty_prettycjson_done=90
fi

clean_module

# back to root
cd ..

}


### configuration settings
build_kagg_config() {

dir=config
step1=0

## change OS name directory
cd $dir/${OS_NAME}

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing nginx configs..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ $x64_sem -eq 1 ]; then
    cp nginx.agg.conf.x64 ${iprefix}/nginx/conf/nginx.agg.conf
elif [ $arm_sem -eq 1 ]; then
    cp nginx.agg.conf.arm ${iprefix}/nginx/conf/nginx.agg.conf
fi

if [ $? -ne 0 ]; then
    echo "Error: cannot install nginx.conf script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step1=1
fi


# final check
kagg_config_done=$step1
if [ $kagg_config_done -eq 1 ]; then
   kagg_config_done=1
else
   kagg_config_done=90
fi

cd ../..

}



### finalize
build_kagg_fin() {
dir=etc
step1=0
step2=0
step3=0
step4=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Setting up directory structure ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ ! -d ${iprefix}/etc ]; then
    mkdir ${iprefix}/etc
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup etc directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/app ]; then
    mkdir ${iprefix}/app
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup app directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/logs ]; then
    mkdir ${iprefix}/logs
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup logs directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi

    step1=`expr $step1 + 1`
fi


if [ ! -d /opt/kronometrix/kernel/data/db ]; then
    mkdir -p /opt/kronometrix/kernel/data/db
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup data directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi

    step1=`expr $step1 + 1`
fi


# there are 4 steps
step1=`expr $step1 / 4`


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Installing kernel startup services ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp kagg db_agg http_agg ${iprefix}/etc/
mkdir ${iprefix}/etc/rc
cp ${OS_NAME}/k* ${iprefix}/etc/rc
if [ $x64_sem -eq 1 ]; then
    cp agg.conf.x64 ${iprefix}/etc/agg.conf
elif [ $arm_sem -eq 1 ]; then
    cp agg.conf.arm ${iprefix}/etc/agg.conf
fi
if [ $? -ne 0 ]; then
    echo "Error: cannot install kernel startup services !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Installing RELEASENOTES and README ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
cd ..
cp RELEASENOTES README TUNING ${iprefix}/
if [ $? -ne 0 ]; then
    echo "Error: cannot install RELEASENOTES README !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# final check; all 3 steps
kagg_fin_done=`expr $step1 + $step2 + $step3`
if [ "$kagg_fin_done" -eq 3 ]; then
   kagg_fin_done=1
else
   kagg_fin_done=90
fi

}


### freebsd package
build_kagg_freebsd_pkg() {

dir='pkg/freebsd'
step1=0
step2=0
step3=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: FreeBSD package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Create stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    pkgname="kagg-${krmxver}-amd64"
else
    pkgname="kagg-${krmxver}-${PT_NAME}"
fi

if [ ! -d $pkgname ]; then
    mkdir -p "$pkgname"
    if [ $? -ne 0 ]; then
        echo "Error: cannot set working package directory !" |\
            tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
fi


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Prepare stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# copy config files
cp pkg-install pkg-deinstall $pkgname/
if [ "$PT_NAME" = "amd64" ]; then
    cp MANIFEST.amd64 $pkgname/MANIFEST
elif [ "$PT_NAME" = "i386" ]; then
    cp MANIFEST.i386 $pkgname/MANIFEST
elif [ "$PT_NAME" = "arm" ]; then
    cp MANIFEST.arm $pkgname/MANIFEST
elif [ "$PT_NAME" = "aarch64" ]; then
    cp MANIFEST.aarch64 $pkgname/MANIFEST
fi

cd ${pkgname}

if [ "$buildno" -ne 0 ]; then

    # get control file fixed correct build and version
    sed "s/^version.*/version: \"${krmxver}b${buildno}\"/" MANIFEST > MANIFEST.tmp
    mv MANIFEST.tmp MANIFEST
else
    # get control file fixed correct build and version
    sed "s/^version.*/version: \"${krmxver}\"/" MANIFEST > MANIFEST.tmp
    mv MANIFEST.tmp MANIFEST
fi


if [ -d /opt/kronometrix/kernel/agg ]; then

    for f in `find /opt/kronometrix/kernel/agg -type d -empty`
    do
        echo "$f: \"-\"," >> dirs.txt
    done
    echo "directories: {" >> MANIFEST
    cat dirs.txt >> MANIFEST
    echo "}" >> MANIFEST


    for f in `find /opt/kronometrix/kernel/agg -type f`
    do
        echo "$f: \"`sha256 -q $f`\"," >> files.txt
    done

    for f in `find /opt/kronometrix/kernel/agg -type l`
    do
        echo "$f: - ," >> files.txt
    done

    echo "files: {" >> MANIFEST
    cat files.txt >> MANIFEST
    echo "}" >> MANIFEST
fi

if [ $? -ne 0 ]; then
    echo "Error: cannot set FreeBSD pkg, MANIFEST create error !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=`expr $step2 + 1`
fi


if [ -f files.txt ]; then
    rm files.txt
fi

if [ -f dirs.txt ]; then
    rm dirs.txt
fi
mv MANIFEST \+MANIFEST
(cd /opt/kronometrix ; tar cf - kernel)|(mkdir -p opt/kronometrix; cd opt/kronometrix; tar xpf -)

pkg create -m . -r . -o /var/tmp >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cannot build FreeBSD pkg, pkg create error !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=`expr $step2 + 1`
fi


# set release
REL=`echo $KERNEL | sed 's/\-.*//'`

# copy config files
if [ "$buildno" -ne 0 ]; then
    mv /var/tmp/kagg-${krmxver}b${buildno}.txz /var/tmp/kagg-${krmxver}b${buildno}-${OS_NAME}${REL}-${PT_NAME}.txz
else
    cp /var/tmp/kagg-${krmxver}.txz /var/tmp/kagg-${krmxver}-${OS_NAME}${REL}-${PT_NAME}.txz
fi


step2=`expr $step2 / 2`

cd ..

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Cleanup stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -d $pkgname ]; then
    rm -rf $pkgname
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean stage directory !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step3=1
    fi
fi


# final check; 3 steps
kagg_fbsd_pkg_done=`expr $step1 + $step2 + $step3`
if [ "$kagg_fbsd_pkg_done" -eq 3 ]; then
   kagg_fbsd_pkg_done=1
else
   kagg_fbsd_pkg_done=90
fi

cd ../..

}



build_kagg_pkg() {

dir=pkg
step1=0
step2=0


echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: tar package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
# tar package must be created

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Kronometrix tar package" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

build_kagg_freebsd_pkg

}
