#/bin/sh
#
#  Kronometrix Development tools
#  Linux Kernel Engine
#
#  Copyright (c) 2015 Stefan Parvu (www.kronometrix.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 2.1

# ############################################################### #
# Kernel Linux                                                    #
# ############################################################### #


### extract_archive
extract_archive() {
# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# echo "module name: $modfile"
# echo "archive dir: $bfile"

if [ -d "$bfile" ]; then
    echo "Info: Step 1 - Extracting $bfile ..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    echo "Warning: ${bfile} directory found, cleaning..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean. Check ${modfile} , ${bfile}" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    echo "Info: Step 1 - Extracting $bfile ..." |\
    tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

}


### init_module
init_module() {

# $1 directory name
directory=$1

cd $directory
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $directory" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
#echo "Directory: $directory"
#echo "Archive: $archive_file"

# dirarchive=${archive_file%%.tar*}
dirarchive=`echo $archive_file | sed 's/\.tar.*//'`

# Debug
#echo "DirArchive: $dirarchive"

extract_archive "$directory" "$dirarchive"

cd $dirarchive

}


### clean_module
clean_module() {
cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


# openresty
build_kernel_openresty() {
dir=openresty
step1=0
step2=0
step3=0
step4=0


# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=/sbin:$PATH \
     ./configure --prefix=${iprefix} --with-luajit \
     >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=/sbin:$PATH make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
kernel_openresty_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $kernel_openresty_done -eq 4 ]; then
   kernel_openresty_done=1
else
   kernel_openresty_done=90
fi

clean_module

}

### redis
build_kernel_redis() {
dir=redis
step1=0
step2=0
step3=0

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Make $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make PREFIX=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make PREFIX=${iprefix} install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi


# final check; all 3 steps
kernel_redis_done=`expr $step1 + $step2 + $step3`
if [ $kernel_redis_done -eq 3 ]; then
   kernel_redis_done=1
else
   kernel_redis_done=90
fi

clean_module

}


### luafilesystem
build_kernel_fs() {
dir="luafilesystem"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# final check; all 3 steps
kernel_luafs_done=`expr $step1 + $step2 + $step3`
if [ $kernel_luafs_done -eq 3 ]; then
   kernel_luafs_done=1
else
   kernel_luafs_done=90
fi

clean_module

# back to root
cd ..

}


### lua-resty-template
build_kernel_template() {
dir="lua-resty-template"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install template.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp -R lib/resty/template* ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install template.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kernel_lua_resty_template_done=`expr $step1 + $step2`
if [ $kernel_lua_resty_template_done -eq 2 ]; then
   kernel_lua_resty_template_done=1
else
   kernel_lua_resty_template_done=90
fi

clean_module

# back to root
cd ..

}


### lua-resty-http-simple
build_kernel_httpsimple() {
dir="lua-resty-http-simple"
step1=0
step2=0

cd lib

init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install simple.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp -R lib/resty/http ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install simple.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kernel_lua_resty_http_simple_done=`expr $step1 + $step2`
if [ $kernel_lua_resty_http_simple_done -eq 2 ]; then
   kernel_lua_resty_http_simple_done=1
else
   kernel_lua_resty_http_simple_done=90
fi

clean_module

# back to root
cd ..
}


### router.lua
build_kernel_router() {
dir="router.lua"
step1=0
step2=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install router.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp router.lua ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install router.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kernel_lua_router_done=`expr $step1 + $step2`
if [ $kernel_lua_router_done -eq 2 ]; then
   kernel_lua_router_done=1
else
   kernel_lua_router_done=90
fi

clean_module

# back to root
cd ..

}


### date.lua
build_kernel_libdate() {
dir="date"
step1=0
step2=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install date.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp date.lua ${iprefix}/lualib/
if [ $? -ne 0 ]; then
    echo "Error: cannot install date.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kernel_libdate_done=`expr $step1 + $step2`
if [ $kernel_libdate_done -eq 2 ]; then
   kernel_libdate_done=1
else
   kernel_libdate_done=90
fi

clean_module

# back to root
cd ..

}


### inspect.lua
build_kernel_inspect() {
dir="inspect.lua"
step1=0
step2=0
step3=0


cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install inspect.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp inspect.lua ${iprefix}/lualib
if [ $? -ne 0 ]; then
    echo "Error: cannot install inspect.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kernel_lua_inspect_done=`expr $step1 + $step2`
if [ $kernel_lua_inspect_done -eq 2 ]; then
   kernel_lua_inspect_done=1
else
   kernel_lua_inspect_done=90
fi

clean_module

# back to root
cd ..

}


### configuration settings
build_kernel_config() {

dir=config
step1=0

## change OS name directory
cd $dir/${OS_NAME}

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing nginx wrappers ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ $enterprise_sem -eq 1 ]; then
    cp nginx.conf.maas ${iprefix}/nginx/conf/nginx.conf
elif [ $rbpi_sem -eq 1 ]; then
    cp nginx.conf.rbpi ${iprefix}/nginx/conf/nginx.conf
fi

if [ $? -ne 0 ]; then
    echo "Error: cannot install nginx.conf script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step1=1
fi


# final check
kernel_config_done=$step1
if [ $kernel_config_done -eq 1 ]; then
   kernel_config_done=1
else
   kernel_config_done=90
fi

cd ../..

}



### finalize
build_kernel_fin() {

dir=etc
step1=0
step2=0
step3=0
step4=0

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Setting up directory structure ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ ! -d ${iprefix}/etc ]; then
    mkdir ${iprefix}/etc
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup etc directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/app ]; then
    mkdir ${iprefix}/app
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup app directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/static ]; then
    mkdir ${iprefix}/static
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup static directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/logs ]; then
    mkdir ${iprefix}/logs
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup logs directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi

    step1=`expr $step1 + 1`
fi


if [ ! -d ${iprefix}/data/db ]; then
    mkdir -p ${iprefix}/data/db
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup data directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi

    step1=`expr $step1 + 1`
fi


if [ ! -d ${iprefix}/data/raw ]; then
    mkdir ${iprefix}/data/raw
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup raw directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi

    step1=`expr $step1 + 1`
fi


if [ ! -d ${iprefix}/data/events ]; then
    mkdir ${iprefix}/data/events
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup events directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi

    step1=`expr $step1 + 1`
fi



# there are 7 settings
step1=`expr $step1 / 7`


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Installing kernel startup services ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp kernel db http ${iprefix}/etc/
mkdir ${iprefix}/etc/rc
cp ${OS_NAME}/kronometrix* ${iprefix}/etc/rc
if [ $enterprise_sem -eq 1 ]; then
    cp redis.conf.maas ${iprefix}/etc/redis.conf
elif [ $rbpi_sem -eq 1 ]; then
    cp redis.conf.rbpi ${iprefix}/etc/redis.conf
fi

if [ $? -ne 0 ]; then
    echo "Error: cannot install kernel startup services !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Installing RELEASENOTES and README  ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
cd ..
cp RELEASENOTES README TUNING ${iprefix}/
if [ $? -ne 0 ]; then
    echo "Error: cannot install RELEASENOTES and README !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# final check; all 3 steps
kernel_fin_done=`expr $step1 + $step2 + $step3`
if [ "$kernel_fin_done" -eq 4 ]; then
   kernel_fin_done=1
else
   kernel_fin_done=90
fi

cd ..

}



## rpm macro configuration file
make_rpmmacro() {

cat > ~/.rpmmacros << "EOF"
%packager       Support Kronometrix
%vendor         Kronometrix

%_topdir        %(echo $HOME)/workspace/kronometrix/kernel/pkg/rpm
%_tmppath       %{_topdir}/tmp
%_sourcedir     %{_topdir}/SOURCES/%{name}-%{version}
%_rpmfilename   %{name}-%{version}-%{arch}.rpm
%_specdir       %{_topdir}/SPECS
%_builddir      %{_topdir}/BUILD
%_rpmdir        %{_topdir}/RPMS
EOF

}


### tar package
build_kernel_tar_pkg() {

step1=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd ${iprefix}/../..

if [ "$buildno" -ne 0 ]; then
    tar cf /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar kronometrix/kernel
    if [ -f /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        rm /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2
    fi
    bzip2 /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar
    if [ $? -ne 0 ]; then
        echo "Error: cannot create kronometrix kernel data recording package !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
else
    # GA General Release
    tar cf /var/tmp/kronometrix-kernel-${krmxver}-${DIST_ID}.${PT_NAME}.tar kronometrix/kernel
    if [ -f /var/tmp/kronometrix-kernel-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        rm /var/tmp/kronometrix-kernel-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2
    fi
    bzip2 /var/tmp/kronometrix-kernel-${krmxver}-${DIST_ID}.${PT_NAME}.tar
    if [ $? -ne 0 ]; then
        echo "Error: cannot create kronometrix kernel data recording package !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
fi

# final check; 1 step
kernel_tar_pkg_done=$step1
if [ "$kernel_tar_pkg_done" -eq 1 ]; then
   kernel_tar_pkg_done=1
else
   kernel_tar_pkg_done=90
fi

cd ${WORKSPACE}/${module}

}


### rpm package
build_kernel_rpm_pkg() {

dir='pkg/rpm'
step1=0
step2=0
step3=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: rpm package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Prepare SOURCE stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


if [ ! -d SPECS ]; then
    echo "Error: cannot find SPECS directory, missing spec file !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

if [ ! -d SOURCES ]; then
    mkdir SOURCES
fi

if [ ! -d SRPMS ]; then
    mkdir SRPMS
fi

if [ ! -d BUILD ]; then
    mkdir BUILD
fi

if [ ! -d RPMS ]; then
    mkdir RPMS
fi

if [ ! -d tmp ]; then
    mkdir tmp
fi

# prepare SOURCES
if [ ! -d "SOURCES/kronometrix-${krmxver}" ]; then
    mkdir "SOURCES/kronometrix-${krmxver}"
fi

if [ "$buildno" -ne 0 ]; then
    # Version: 1.0.0
    # Release: b10
    # get control file fixed correct build and version
    sed "s/^Version.*/Version: ${krmxver}/" SPECS/kronometrix > SPECS/kronometrix.tmp
    mv SPECS/kronometrix.tmp SPECS/kronometrix
    sed "s/^Release.*/Release: b${buildno}/" SPECS/kronometrix > SPECS/kronometrix.tmp
    mv SPECS/kronometrix.tmp SPECS/kronometrix


    if [ -f /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        cp /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 \
           SOURCES/kronometrix-kernel-${krmxver}/kronometrix-${krmxver}-${PT_NAME}.tar.bz2
        if [ $? -ne 0 ]; then
            echo "Error: cannot copy tar archive to SOURCE directory !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step1=1
        fi
    fi
else

    sed "s/^Version.*/Version: ${krmxver}/" SPECS/kronometrix > SPECS/kronometrix.tmp
    mv SPECS/kronometrix.tmp SPECS/kronometrix
    sed "s/^Release.*/Release: 0/" SPECS/kronometrix > SPECS/kronometrix.tmp
    mv SPECS/kronometrix.tmp SPECS/kronometrix

    if [ -f /var/tmp/kronometrix-kernel-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        cp /var/tmp/kronometrix-kernel-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 \
            SOURCES/kronometrix-kernel-${krmxver}/kronometrix-${krmxver}-${PT_NAME}.tar.bz2
        if [ $? -ne 0 ]; then
            echo "Error: cannot copy tar archive to SOURCE directory !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step1=1
        fi
    fi
fi


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Build rpm package" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f $HOME/.rpmmacros ]; then
    STAMP=`date +"%Y%m%d_%H%M%S"`
    mv $HOME/.rpmmacros $HOME/.rpmmacros.${STAMP}
    make_rpmmacro
else
    make_rpmmacro
fi


if [ -f SPECS/kronometrix ]; then

    rpmbuild -bb ./SPECS/kronometrix >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: cannot build rpm, rpmbuild error !" |\
            tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step2=1
    fi
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Cleanup rpm stage directories" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f RPMS/kronometrix-kernel-${krmxver}-${PT_NAME}.rpm ]; then
   cp RPMS/kronometrix-kernel-${krmxver}-${PT_NAME}.rpm /var/tmp
   # cleanup
   if [ $? -eq 0 ]; then 
       rm -rf RPMS SOURCES SRPMS BUILD tmp
       rm $HOME/.rpmmacros
       step3=1
   fi
fi


# final check; 3 steps
kernel_rpm_pkg_done=`expr $step1 + $step2 + $step3`
if [ "$kernel_rpm_pkg_done" -eq 3 ]; then
   kernel_rpm_pkg_done=1
else
   kernel_rpm_pkg_done=90
fi

cd ../..

}


### deb package
build_kernel_deb_pkg() {

dir='pkg/deb'
step1=0
step2=0
step3=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: deb package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Create stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    if [ "$buildno" -ne 0 ]; then
        pkgname="kronometrix-kernel-${krmxver}b${buildno}-amd64"
    else
        pkgname="kronometrix-kernel-${krmxver}-amd64"
    fi
else
    if [ "$buildno" -ne 0 ]; then
        pkgname="kronometrix-kernel-${krmxver}b${buildno}-${PT_NAME}"
    else
        pkgname="kronometrix-kernel-${krmxver}-${PT_NAME}"
    fi
fi

if [ ! -d $pkgname ]; then
    mkdir -p "$pkgname/opt"
    mkdir -p "$pkgname/DEBIAN"
    if [ $? -ne 0 ]; then
        echo "Error: cannot copy tar archive to SOURCE directory !" |\
            tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
fi


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Prepare stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# copy config files
cp changelog prerm copyright preinst postinst $pkgname/DEBIAN
if [ "$PT_NAME" = "x86_64" ]; then
    cp control.amd64 $pkgname/DEBIAN/control
elif [ "$PT_NAME" = "armv6l" ]; then
    cp control.armv6l $pkgname/DEBIAN/control
elif [ "$PT_NAME" = "i386" ]; then
    cp control.i386 $pkgname/DEBIAN/control
fi


# tar package
cd ${pkgname}/opt

if [ "$buildno" -ne 0 ]; then

    # get control file fixed correct build and version
    sed "s/^Version.*/Version:${krmxver}-b${buildno}/" ../../$pkgname/DEBIAN/control > ../../$pkgname/DEBIAN/control.tmp
    mv ../../${pkgname}/DEBIAN/control.tmp ../../${pkgname}/DEBIAN/control

    if [ -f /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        bzcat /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 | tar xf -
        if [ $? -ne 0 ]; then
            echo "Error: cannot untar archive !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step2=1
        fi
    fi
else

    # get control file fixed correct version
    sed "s/^Version.*/Version:${krmxver}/" ../../$pkgname/DEBIAN/control > ../../$pkgname/DEBIAN/control.tmp
    mv ../../${pkgname}/DEBIAN/control.tmp ../../${pkgname}/DEBIAN/control

    if [ -f /var/tmp/kronometrix-kernel-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        bzcat /var/tmp/kronometrix-kernel-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 | tar xf -
        if [ $? -ne 0 ]; then
            echo "Error: cannot untar archive !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step2=1
        fi
    fi
fi

cd ../..

/usr/bin/dpkg-deb --build $pkgname >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cannot build deb, dpkg-deb error !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=`expr $step2 + 1`
fi

step2=`expr $step2 / 2`


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Cleanup stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -d $pkgname ]; then
    rm -rf $pkgname
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean stage directory !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step3=1
    fi
fi

mv ${pkgname}.deb /var/tmp

# kronometrix-kernel-1.0.0b31-armv6l.deb
if [ "$buildno" -ne 0 ]; then
    if [ "$PT_NAME" = "x86_64" ]; then
        mv /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-amd64.deb /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${DIST_ID}${RELOS}-amd64.deb
    else
        mv /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${PT_NAME}.deb /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${DIST_ID}${RELOS}-${PT_NAME}.deb
    fi
else
    if [ "$PT_NAME" = "x86_64" ]; then
        mv /var/tmp/kronometrix-kernel-${krmxver}-amd64.deb /var/tmp/kronometrix-kernel-${krmxver}-${DIST_ID}${RELOS}-amd64.deb
    else
        mv /var/tmp/kronometrix-kernel-${krmxver}-${PT_NAME}.deb /var/tmp/kronometrix-kernel-${krmxver}-${DIST_ID}${RELOS}-${PT_NAME}.deb
    fi
fi


# final check; 3 steps
kernel_deb_pkg_done=`expr $step1 + $step2 + $step3`
if [ "$kernel_deb_pkg_done" -eq 3 ]; then
   kernel_deb_pkg_done=1
else
   kernel_deb_pkg_done=90
fi

cd ../..

}


build_kernel_pkg() {

dir=pkg
step1=0
step2=0


echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: tar package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
# tar package must be created

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Kronometrix tar package" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


case "$DIST_ID" in
    centos|rhel)
        build_kernel_tar_pkg
        build_kernel_rpm_pkg
    ;;

    debian|ubuntu|raspbian)
        build_kernel_tar_pkg
        build_kernel_deb_pkg
    ;;
               
    *)
        echo "Not supported Linux distro, check builder"
        exit 3
    ;;
esac


}


