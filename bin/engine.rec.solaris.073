#!/usr/bin/ksh93
#
#  SDR Development tools, Solaris recording engine 
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 0.6.6

# ############################################################### #
# SDR Engine: Solaris                                             # 
# ############################################################### #


# ############################################################### #
# extract_archive                                                 #
# ############################################################### #
extract_archive() {
# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# print "module name: $modfile"
# print "archive dir: $bfile"

if [[ -d $bfile ]]; then
    print "Info: Step 1 - Extracting $bfile ..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    print "Warning: ${bfile} directory found, cleaning..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if (( $? != 0 )); then
        print "Error: cannot clean. Check ${modfile} , ${bfile}" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG}
else
    print "Info: Step 1 - Extracting $bfile ..." |\
    tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG}
fi

}



# ############################################################### #
# Recording: Libssh2 Build Phase                                  #
# ############################################################### #

build_rec_ssh2() {
dir=libssh2
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n##################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-m64 -xO3 -KPIC -I${iprefix}/include" \
    LDFLAGS="-m64 -L${iprefix}/lib -R${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# Fix for 1.4.0 Release
grep example Makefile >/dev/null 2>&1
if (( $? == 0 )); then
    sed -e 's/example //' Makefile > Makefile.tmp
    mv Makefile.tmp Makefile
fi



# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
gmake >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

gmake install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rec_ssh2_done = step1 + step2 + step3 + step4 ))
if (( rec_ssh2_done == 4 )); then
   rec_ssh2_done=1
else
   rec_ssh2_done=90
fi

cd ../..

}


# ############################################################### #
# Recording: Perl Modules: Net::SSH2                              #
# ############################################################### #

build_rec_perlssh2() {

dir=Net-SSH2
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
print "\n#######################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

print "iprefix=$iprefix"

env LD_LIBRARY_PATH=${iprefix}/lib \
${iprefix}/perl/bin/perl Makefile.PL lib=${iprefix}/lib inc=${iprefix}/include >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

# LDFLAGS =  -m64 -L/lib/64 
sed "s:LDFLAGS =  -m64 -L/lib/64:LDFLAGS = -m64 -L${iprefix}/lib -R${iprefix}/lib -L/lib/64 -L/usr/sfw/lib/64 -R/usr/sfw/lib/64:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

# LDDLFLAGS =  -G -m64 -L/lib/64
sed "s:LDDLFLAGS =  -G -m64 -L/lib/64:LDDLFLAGS = -G -m64 -L${iprefix}/lib -R${iprefix}/lib -L/usr/sfw/lib/64 -R/usr/sfw/lib/64 -L/lib/64:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile


# CCFLAGS = -D_REENTRANT -m64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
sed "s:CCFLAGS = -m64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64:CCFLAGS = -I${iprefix}/include -D_REENTRANT -m64 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make test $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi

#
# final check; all 5 steps
(( rec_perlssh2_done = step1 + step2 + step3 + step4 + step5 ))
if (( rec_perlssh2_done == 5 )); then
   rec_perlssh2_done=1
else
   rec_perlssh2_done=90
fi

cd ../..

}


# ############################################################### #
# Recording: Perl Build Phase                                     #
# ############################################################### #
build_rec_perl() {
dir=perl
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0
step7=0


cd $dir
print "\n#######################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# get CPAN version
print $dirarchive | sed 's/perl-//' | read cpanver

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure perl ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

sh Configure -Dcc='cc' -Doptimize='-xO3' -Duselargefiles -Duse64bitall \
             -Dcf_by="support@systemdatarecorder.org"       \
             -Dcf_email="support@systemdatarecorder.org"    \
             -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: configure perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    # fix config.sh
    # Workaround: Bug 32 - SDR Perl - Memory leak in Perl 5.10+
    # on Solaris 10 with %ENV remove flag: -DPERL_USE_SAFE_PUTENV


    # ################################################################## #
    # fix ldflags
    # ################################################################## #
    print "Fixing ldflags..." >> ${BUILD_PATH}/${BUILD_LOG}
    if [[ $PT_NAME == "i86pc" ]]; then
        sed 's/\-xarch=generic64 \-L\/opt\/sunstudio12.1\/prod\/lib\/amd64 \-L\/lib\/64/\-m64 \-L\/lib\/64/' config.sh > config.sh.tmp
    else
        # ldflags=' -xarch=generic64 -L/opt/sunstudio12.1/prod/lib/sparc/64 -L/opt/sunstudio12.1/prod/lib/v9 
        # -L/lib/64 -L/usr/lib/spar cv9 -L/usr/ccs/lib/sparcv9 '

        sed 's/^ldflags\=.*/ldflags\='\''\-m64 \-L\/lib\/64 \-L\/usr\/lib\/sparcv9'\''/' config.sh > config.sh.tmp
    fi
    
    if (( $? != 0 )); then
        print "Error: fixing ldflags perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

    mv config.sh.tmp config.sh


    # ################################################################## #
    # fix libspath
    # ################################################################## #
    print "Fixing libspath..." >> ${BUILD_PATH}/${BUILD_LOG}
    if [[ $PT_NAME == "i86pc" ]]; then
        sed 's/\/opt\/sunstudio12.1\/prod\/lib\/amd64 \/lib\/64 \/usr\/lib \/usr\/ccs\/lib/\/lib\/64 \/usr\/lib \/usr\/ccs\/lib/' config.sh > config.sh.tmp
    else
        # libspath=' /opt/sunstudio12.1/prod/lib/sparc/64 /opt/sunstudio12.1/prod/lib/v9 
        # /lib/64 /usr/lib/sparcv9 /usr/ccs/lib/sparcv9 /usr/lib /usr/ccs/lib'
        sed 's/^libspath\=.*/libspath\='\''\/lib\/64 \/usr\/lib\/sparcv9 \/usr\/ccs\/lib\/sparcv9 \/usr\/lib \/usr\/ccs\/lib'\''/' config.sh > config.sh.tmp
    fi
    if (( $? != 0 )); then
        print "Error: fixing libpath perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
    mv config.sh.tmp config.sh

    # ################################################################## #
    # fix loclibpth
    # ################################################################## #
    print "Fixing loclibpth..." >> ${BUILD_PATH}/${BUILD_LOG} 
    if [[ $PT_NAME == "i86pc" ]]; then
        sed 's/\/opt\/sunstudio12.1\/prod\/lib\/amd64 \/amd64 \/lib\/64 \/64 \/usr\/local\/lib \/opt\/local\/lib \/usr\/gnu\/lib \/opt\/gnu\/lib \/usr\/GNU\/lib \/opt\/GNU\/lib/\/amd64 \/lib\/64 \/64 \/usr\/lib \/usr\/ccs\/lib/' config.sh > config.sh.tmp
    else
       # loclibpth='/opt/sunstudio12.1/prod/lib/sparc/64 /opt/sunstudio12.1/prod/lib/v9  
       # /lib/64 /64 /usr/lib/sparcv9 /usr/ccs/lib/sparcv9 /usr/local/lib /opt/local/lib 
       # /usr/gnu/lib /opt/gnu/lib /usr/GNU/lib /opt/GNU/lib'
       sed 's/^loclibpth=.*/loclibpth\='\''\/lib\/64 \/usr\/lib\/sparcv9 \/usr\/ccs\/lib\/sparcv9'\''/' config.sh > config.sh.tmp
    fi
    if (( $? != 0 )); then
        print "Error: fixing loclibpth perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
    mv config.sh.tmp config.sh
    
    # ################################################################## #
    # fix ccflags
    # ################################################################## #
    print "Fixing ccflags..." >> ${BUILD_PATH}/${BUILD_LOG}
    if [[ $PT_NAME == "i86pc" ]]; then
        sed 's/\-xarch=generic64 \-D_LARGEFILE_SOURCE \-D_FILE_OFFSET_BITS=64 \-DPERL_USE_SAFE_PUTENV/\-m64 \-D_LARGEFILE_SOURCE \-D_FILE_OFFSET_BITS=64/' config.sh > config.sh.tmp
    else
        sed 's/^ccflags\=.*/ccflags\='\''\-m64 \-D_LARGEFILE_SOURCE \-D_FILE_OFFSET_BITS=64'\''/' config.sh > config.sh.tmp
    fi

    if (( $? != 0 )); then
        print "Error: fixing ccflags perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
    mv config.sh.tmp config.sh

    # ################################################################## #
    # fix cppflags
    # ################################################################## #
    print "Fixing cppflags..." >> ${BUILD_PATH}/${BUILD_LOG}
    sed 's/\-xarch=generic64/\-m64/' config.sh > config.sh.tmp
        
    if (( $? != 0 )); then
        print "Error: fixing cppflags perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
    mv config.sh.tmp config.sh
 
    sh Configure -S >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    make depend >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if (( $? != 0 )); then
        print "Error: make depend perl failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step2=1
    fi
fi

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make test perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make test perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# STEP 5
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 5 - Make install perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
if [[ -d ${iprefix}/perl ]]; then
    print "Warning: perl directory found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm -rf ${iprefix}/perl
    if (( $? != 0 )); then
        print "Error: cleaning $dir directory" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
fi
 
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi


# STEP 6
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 6 - CPAN modules" | tee -a ${BUILD_PATH}/${BUILD_LOG}

cp /opt/build/etc/Config.pm ${iprefix}/perl/lib/${cpanver}/CPAN

#${iprefix}/perl/bin/perl -MCPAN -e 'install Bundle::LWP' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#if (( $? != 0 )); then
#    print "Error: Bundle::LWP installation failed !" |\
#     tee -a ${BUILD_PATH}/${BUILD_LOG}
#    rm /var/tmp/build.${module}
#    exit 3
#else
#    (( step6 = step6 + 1))
#fi

# 24 module
for lib in PerlIO::gzip Date::Calc \
   Net::Telnet Authen::SASL Email::Valid Text::CSV_XS JSON::XS \
   Text::CSV Regexp::Common Regexp::Log::DateRange Term::Prompt \
   Net::Netmask Text::Autoformat Text::FormatTable  \
   XML::NamespaceSupport XML::SAX Net::SFTP::Foreign \
   Data::Dumper Data::Report Log::Log4perl Logfile::Rotate \
   Proc::Daemon Proc::PID::File File::Tail
do
    ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if (( $? != 0 )); then
        print "Error: $lib installation failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        ((step6 = step6 + 1))
    fi
done

# there are 24 perl modules install calls 
(( step6 = step6 / 24 ));


# ############################################################### #
# STEP 7
# ############################################################### #
cd ../..

dir=kstat
cd $dir

# get the perl archive
# ls *.tar.gz | read build_file

# archive=${build_file%%.tar*}
# extract_archive "$dir" "$archive"

#  Sun::Solaris::Exacct
#  Sun::Solaris::Kstat
#  Sun::Solaris::Lgrp
#  Sun::Solaris::Privilege
#  Sun::Solaris::Task
#  Sun::Solaris::Utils

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 7 - building Solaris modules" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# ############################################################### #
# Exacct MODULE
# ############################################################### #
cd Exacct
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Exacct cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: building Sun::Solaris::Exacct module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Exacct perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Exacct make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Exacct make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


cd ..


# ############################################################### #
# KSTAT MODULE
# ############################################################### #
cd Kstat
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Kstat cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: building Sun::Solaris::Kstat module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Kstat perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Kstat make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Kstat make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

cd ..


# ############################################################### #
# LGRP MODULE
# ############################################################### #
cd Lgrp 
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Lgrp cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: building Sun::Solaris::Lgrp module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Lgrp perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Lgrp make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Lgrp make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

cd ..


# ############################################################### #
# Privilege MODULE
# ############################################################### #
cd Privilege
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Privilege cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: building Sun::Solaris::Privilege module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Privilege perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Privilege make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Privilege make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

cd ..


# ############################################################### #
# Task MODULE
# ############################################################### #
cd Task 
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Task cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: building Sun::Solaris::Task module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Task perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Task make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Task make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

cd ..



# ############################################################### #
# Utils MODULE
# ############################################################### #
cd Utils 
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Utils cannot change directory!" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: building Sun::Solaris::Utils module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Utils perl Makefile.PL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Utils make failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: Sun::Solaris::Utils make install failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step7 = step7 + 1))
fi

# step 7 = 24 checks
(( step7 = step7 / 24 ));

# final check; all 6 steps
(( perl_done = step1 + step2 + step3 + step4 + step5 + step6 + step7 ))
if (( perl_done == 7 )); then
    perl_done=1
else
    perl_done=90
fi

print "##################################################"

cd ../..

}



# ############################################################### #
# Recording: openssl Build Phase                                  #
# ############################################################### #

build_rec_ossl() {
dir=openssl
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n#######################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [[ $PT_NAME == "i86pc" ]]; then
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    ./Configure solaris64-x86_64-cc threads shared no-sse2 --prefix=${iprefix} \
    --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    ./Configure solaris64-sparcv9-cc threads shared --prefix=${iprefix} \
    --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# fix xarch
print "Fixing arch flag..." >> ${BUILD_PATH}/${BUILD_LOG}
if [[ $PT_NAME == "i86pc" ]]; then
    sed 's/\-xarch\=amd64/\-m64/g' Makefile > Makefile.tmp
else
    sed 's/\-xarch\=v9/\-m64/g' Makefile > Makefile.tmp
    
fi
if (( $? != 0 )); then
    print "Error: fixing xarch Makefile failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi
mv Makefile.tmp Makefile

print "Fixing SHARED_LDFLAGS flag..." >> ${BUILD_PATH}/${BUILD_LOG}
#if [[ $PT_NAME == "i86pc" ]]; then
#    sed 's/SHARED_LDFLAGS\=\-m64 \-G \-dy \-z text/SHARED_LDFLAGS\=\-m64 \-G \-dy \-z text \-L\/opt\/sdr\/lib \-R\/opt\/sdr\/lib/' Makefile > Makefile.tmp

sed "s:SHARED_LDFLAGS=-m64 -G -dy -z text:SHARED_LDFLAGS=-m64 -G -dy -z text -L${iprefix}/lib -R${iprefix}/lib -L/usr/lib:" Makefile > Makefile.tmp


#else
    # SHARED_LDFLAGS=-xarch=v9 -G -dy -z text
    # 
#    sed 's/^SHARED_LDFLAGS\=.*/SHARED_LDFLAGS\=\-xarch\=v9 \-G \-dy \-z text \-L\/opt\/sdr\/lib \-R\/opt\/sdr\/lib/' Makefile > Makefile.tmp   
#fi
if (( $? != 0 )); then
    print "Error: fixing SHARED_LDFLAGS Makefile failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi
mv Makefile.tmp Makefile



make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( ossl_done = step1 + step2 + step3 + step4 ))
if (( ossl_done == 4 )); then
    ossl_done=1
else
    ossl_done=90
fi

cd ../..

}



# ############################################################### #
# Recording: Idn Build Phase                                      #
# ############################################################### #

build_rec_idn() {
dir=idn
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n##################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}


print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-m64 -xO3 -KPIC -I${iprefix}/include" \
    LDFLAGS="-m64 -L${iprefix}/lib -R${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
 
# /usr/bin/env PATH=/opt/sdr/bin:/opt/sdr/perl/bin:$PATH CC=cc CFLAGS="-m64 -xO3" LDFLAGS="-m64 -L/lib/64 -L/usr/lib/64" ./configure \
# --prefix=/opt/sdr >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( idn_done = step1 + step2 + step3 + step4 ))
if (( idn_done == 4 )); then
    idn_done=1
else
    idn_done=90
fi

cd ../..

}



# ############################################################### #
# Recording: libxml2 Build Phase                                  #
# ############################################################### #
build_rec_libxml2() {
dir=libxml2
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-m64 -xO3 -KPIC -I${iprefix}/include" \
    LDFLAGS="-m64 -L${iprefix}/lib -R${iprefix}/lib" \
    ./configure --with-python=no \
    --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( libxml2_done = step1 + step2 + step3 + step4 ))
if (( libxml2_done == 4 )); then
   libxml2_done=1
else
   libxml2_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}



# ############################################################### #
# Recording: Perl Module:  XML::LibXML                            #
# ############################################################### #

build_rec_xmllibxml() {

dir=XML-LibXML
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

#env ${iprefix}/perl/bin/perl Makefile.PL XMLPREFIX=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
${iprefix}/perl/bin/perl Makefile.PL LIBS="-L${iprefix}/lib" INC="-I${iprefix}/include/libxml2" >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

#
# final check; all 4 steps
(( perllxml_done = step1 + step2 + step3 + step4 ))
if (( perllxml_done == 4 )); then
   perllxml_done=1
else
   perllxml_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}





# ############################################################### #
# Recording: Curl Build Phase                                     #
# ############################################################### #

build_rec_curl() {
dir=curl
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n##################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}


print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

    PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig:/usr/lib/64/pkgconfig \
    CC=cc CFLAGS="-m64 -xO3 -KPIC" CPPFLAGS="-I${iprefix}/include" \
    LDFLAGS="-m64 -L${iprefix}/lib -R${iprefix}/lib -L/usr/lib/64 -R/usr/lib/64 \
    -L/usr/sfw/lib/64 -R/usr/sfw/lib/64" \
    ./configure --prefix=${iprefix} \
    --with-ssl=${iprefix} --with-libidn=${iprefix} --with-libssh2=${iprefix} \
    --enable-cookies --enable-nonblocking --disable-ldap --disable-ldaps >> ${BUILD_PATH}/${BUILD_LOG} 2>&1


#/usr/bin/env PATH=/opt/sdr/bin:/opt/sdr/perl/bin:$PATH \
#    PKG_CONFIG_PATH=/opt/sdr/lib/pkgconfig:/usr/lib/64/pkgconfig \
#    CC=cc \
#    CFLAGS="-m64 -xO3 -I/opt/sdr/include"  \
#    LDFLAGS="-m64 -L/lib/64 -L/opt/sdr/lib -R/opt/sdr/lib -L/usr/lib/64 -R/usr/lib/64 -L/usr/sfw/lib/64 -R/usr/sfw/lib/64" \
#    ./configure --prefix=/opt/sdr --enable-cookies --enable-nonblocking --with-libidn >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [[ -f /opt/sdr/bin/curl ]]; then
    print "Warning: $dir binary found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /opt/sdr/bin/curl
    rm /opt/sdr/bin/curl-config
    if (( $? != 0 )); then
        print "Error: cleaning curl binary failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

fi

if [[ -d ${iprefix}/lib ]]; then
    print "Warning: lib directory found..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    for f in $(find ${iprefix}/lib -name '*curl*')
    do
        print "Cleaning file: $f..." |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm $f
        if (( $? != 0 )); then
            print "Error: cleaning lib $f file failed !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    done
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install curl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( curl_done = step1 + step2 + step3 + step4 ))
if (( curl_done == 4 )); then
    curl_done=1
else
    curl_done=90
fi

cd ../..

}



# ############################################################### #
# Recording: WWW::Curl Phase                                      #
# ############################################################### #

build_rec_wcurl() {
#=============
#4. WWW::Curl 
#=============
#
#  WWW-Curl-4.xx:
#  perl Make${module}.${version}PL
#  Modify the Makefile to include -L/opt/sdr/lib -R/opt/sdr/lib
#
#  LDDLFLAGS = -G -m64 -L/lib/64 -L/opt/sdr/lib -R/opt/sdr/lib
#  LDFLAGS = -m64 -L/lib/64 -L/opt/sdr/lib -R/opt/sdr/lib
#
#  make
#  make install

dir=WWW-Curl
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n#######################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}


print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

/usr/bin/env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi



# LDFLAGS =  -m64 -L/lib/64 
sed "s:LDFLAGS =  -m64 -L/lib/64:LDFLAGS = -m64 -L${iprefix}/lib -R${iprefix}/lib -L/lib/64:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

# LDDLFLAGS =  -G -m64 -L/lib/64
sed "s:LDDLFLAGS =  -G -m64 -L/lib/64:LDDLFLAGS = -G -m64 -L${iprefix}/lib -R${iprefix}/lib -L/lib/64:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile



# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

#
# final check; all 4 steps
(( wwwcurl_done = step1 + step2 + step3 + step4 ))
if (( wwwcurl_done == 4 )); then
    wwwcurl_done=1
else
    wwwcurl_done=90
fi

cd ../..

}


# ############################################################### #
# Recording: Nicrec Native Phase                                  #
# ############################################################### #
build_rec_nrec() {

dir=nicrec
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n#######################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp Makefile.${OS_NAME} Makefile
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi



# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    ((step3 = step3 + 1))
fi


# STEP 4
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
if [[ -f ${iprefix}/bin/nicrec ]]; then
    print "Warning: nicrec binary found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm -f ${iprefix}/bin/nicrec
    if (( $? != 0 )); then
        print "Error: cleaning nicrec binary failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
fi


if [[ ! -d ${iprefix}/man ]]; then
    mkdir -p ${iprefix}/man/man1
fi

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make install nicrec failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

if [[ $PT_NAME == "i86pc" ]]; then
    mv -f ${iprefix}/bin/nicrec ${iprefix}/bin/nicrec_x64
    mv -f ${iprefix}/man/man1/nicrec.1 ${iprefix}/man/man1/nicrec_x64.1
else
    mv -f ${iprefix}/bin/nicrec ${iprefix}/bin/nicrec_sparcv9
    mv -f ${iprefix}/man/man1/nicrec.1 ${iprefix}/man/man1/nicrec_sparcv9.1
fi 

# final check; all 4 steps
(( nrec_done = step1 + step2 + step3 + step4 ))
if (( nrec_done == 4 )); then
    nrec_done=1
else
    nrec_done=90
fi

cd ../..


}

# ############################################################### #
# Recording: WebRec Phase                                         #
# ############################################################### #
build_rec_webrec() {

dir=WebRec
step1=0
step2=0
step3=0


cd $dir
print "\n#######################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}



# STEP 1

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 1 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

/usr/bin/env JAVA_HOME=/opt/java/current ant clean >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi  

# STEP 2
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
/usr/bin/env JAVA_HOME=/opt/java/current ant >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi 

# STEP 3
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 3 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# etc copy
if [[ ! -d ${iprefix}/etc ]]; then
    mkdir ${iprefix}/etc
fi
cp etc/log4j.properties ${iprefix}/etc
cp etc/webrec.conf ${iprefix}/etc

# lib
if [[ ! -d ${iprefix}/lib ]]; then
    mkdir ${iprefix}/lib
fi
cp lib/*.jar ${iprefix}/lib
cp dist/webrec.jar ${iprefix}/lib
if (( $? != 0 )); then
    print "Error: webrec.jar failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi
#

# final check; all 4 steps
(( wrec_done = step1 + step2 + step3 ))
if (( wrec_done == 3 )); then
    wrec_done=1
else
    wrec_done=90
fi


cd ..

}


# ############################################################### #
# Recording: Scripts                                              #
# ############################################################### #
build_rec_scripts() {

dir=scripts
step1=0
step2=0


cd $dir/${OS_NAME}
print "\n#######################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 1 - Installing setenv ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [[ -f setenv ]]; then
    cp setenv  ${iprefix}/bin
    if (( $? != 0 )); then
        print "Error: cannot install setenv script !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
else
    print "Error: setenv missing, check workspace !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# STEP 2
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 2 - Installing recorders ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

ls *rec* | wc -l | read nrecs
if (( nrecs != 9 )); then
    print "Error: wrong no. of recorders, check workspace !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else

    if [[ $PT_NAME == "i86pc" ]]; then 
        cp cpurec hdwrec jvmrec netrec nicrec sysrec webrec zonerec ${iprefix}/bin
    else
        cp corerec cpurec hdwrec jvmrec netrec nicrec sysrec webrec zonerec corestat.* ${iprefix}/bin
    fi
    if (( $? != 0 )); then
        print "Error: cannot install rec scripts !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step2=1
    fi
fi

# set the other bins
cp sender raw2day rotatelog ${iprefix}/bin
if (( $? != 0 )); then
    print "Error: cannot install additional bins !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set etc settings
cp -pr etc ${iprefix}
if (( $? != 0 )); then
    print "Error: cannot install etc settings !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set smf settings
cp -pr smf ${iprefix}
if (( $? != 0 )); then
    print "Error: cannot install smf manifests !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi



# final check; all 2 steps
(( recs_done = step1 + step2 ))
if (( recs_done == 2 )); then
    recs_done=1
else
    recs_done=90
fi


cd ../..


# set man pages
if [[ ! -d ${iprefix}/man ]]; then
    mkdir ${iprefix}/man
fi

cd man/${OS_NAME}
cp -pr * ${iprefix}/man
if (( $? != 0 )); then
    print "Error: cannot install man pages !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# link man to share man
if [[ -d ${iprefix}/share/man/man3 ]]; then
    ln -s ${iprefix}/share/man/man3 ${iprefix}/man
fi

if [[ -d ${iprefix}/share/man/man8 ]]; then
    ln -s ${iprefix}/share/man/man8 ${iprefix}/man
fi

if [[ -d ${iprefix}/share/man/man5 ]]; then
    ln -s ${iprefix}/share/man/man5 ${iprefix}/man
fi

for man in $(ls ${iprefix}/share/man/man1)
do
    ln -s ${iprefix}/share/man/man1/${man} ${iprefix}/man/man1
done 


cd ../..
# set release notes
cp release.notes.${OS_NAME} ${iprefix}/release.notes
if (( $? != 0 )); then
    print "Error: cannot install release.notes !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set README 
cp README.${OS_NAME} ${iprefix}
if (( $? != 0 )); then
    print "Error: cannot install README.${OS_NMAE} !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# set log directory
if [[ ! -d ${iprefix}/log ]]; then
    mkdir -p ${iprefix}/log/daily
    if (( $? != 0 )); then
        print "Error: cannot set log/daily director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

    mkdir -p ${iprefix}/log/current
    if (( $? != 0 )); then
        print "Error: cannot set log/current director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
else
    # we have log dir, check daily, raw
    if [[ ! -d ${iprefix}/log/daily ]]; then 
        mkdir ${iprefix}/log/daily
        if (( $? != 0 )); then
            print "Error: cannot set log/daily director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi

    if [[ ! -d ${iprefix}/log/current ]]; then 
        mkdir ${iprefix}/log/current
        if (( $? != 0 )); then
            print "Error: cannot set log/current director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi
fi


}


# ############################################################### #
# Recording: Test Scripts                                         #
# ############################################################### #
test_rec_scripts() {

dir=tests
step1=0
step2=0
step3=0


cd $dir
print "\n##################################################"
print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Testing SDR" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
# Check all recorders if they are sane and execute properly

print "" >> ${BUILD_PATH}/${BUILD_LOG}
print "Info: Step 1 - Check recorders" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

. ${iprefix}/bin/setenv
for r in sys cpu net nic hdw zone
do
    print "" >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    print "Executing ${r}rec" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    #if [[ $r == "nic" ]]; then
    #    if [[ $PT_NAME == "i86pc" ]]; then
    #        ${SDR_BIN}/${r}rec_x64 >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    #    else
    #        ${SDR_BIN}/${r}rec_sparcv9 >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    #    fi
    #else
    #    ${SDR_BIN}/${r}rec >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    #fi
    
    ${SDR_BIN}/${r}rec >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    
    if (( $? != 0 )); then
        print "Error: cannot run ${r}rec !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        ((step1=step1+1))
    fi
done

(( step1 = step1 / 6 ))

# final check; all 4 steps
(( tests_done = step1 ))

if (( tests_done == 1 )); then
    tests_done=1
else
    tests_done=90
fi

cd ..

}

