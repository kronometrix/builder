#/bin/sh
#
#  Kronometrix Development tools
#  FreeBSD Analytics Kernel Engine
#
#  Copyright (c) 2015 Stefan Parvu (www.kronometrix.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 2

# ############################################################### #
# Analytics Authentication FreeBSD                                #
# ############################################################### #


### extract_archive
extract_archive() {
# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# echo "module name: $modfile"
# echo "archive dir: $bfile"

if [ -d "$bfile" ]; then
    echo "Info: Step 1 - Extracting $bfile ..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    echo "Warning: ${bfile} directory found, cleaning..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean. Check ${modfile} , ${bfile}" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    echo "Info: Step 1 - Extracting $bfile ..." |\
    tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

}


### init_module
init_module() {

# $1 directory name
directory=$1

cd $directory
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $directory" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
#echo "Directory: $directory"
#echo "Archive: $archive_file"

# dirarchive=${archive_file%%.tar*}
dirarchive=`echo $archive_file | sed 's/\.tar.*//'`

# Debug
#echo "DirArchive: $dirarchive"

extract_archive "$directory" "$dirarchive"

cd $dirarchive

}


### clean_module
clean_module() {
cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


### openresty
build_kernel_openresty() {
dir=openresty
step1=0
step2=0
step3=0
step4=0


# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

 env PKG_CONFIG_PATH=/usr/local/libdata/pkgconfig \
     CC=cc ./configure --prefix=${iprefix} --with-luajit \
     --with-cc=/usr/bin/cc >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
gmake >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


gmake install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install gd failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
kernel_openresty_done=`expr $step1 + $step2 + $step3 + $step4`
if [ $kernel_openresty_done -eq 4 ]; then
   kernel_openresty_done=1
else
   kernel_openresty_done=90
fi

clean_module

}


### redis
build_kernel_redis() {
dir=redis
step1=0
step2=0
step3=0

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Make $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

gmake PREFIX=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

gmake PREFIX=${iprefix} install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    exit 3
else
    step3=1
fi


# final check; all 3 steps
kernel_redis_done=`expr $step1 + $step2 + $step3`
if [ $kernel_redis_done -eq 3 ]; then
   kernel_redis_done=1
else
   kernel_redis_done=90
fi

clean_module

}


### luafilesystem
build_kernel_libluafs() {
dir="luafilesystem"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

gmake >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
gmake install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# final check; all 3 steps
kernel_libluafs_done=`expr $step1 + $step2 + $step3`
if [ $kernel_libluafs_done -eq 3 ]; then
   kernel_libluafs_done=1
else
   kernel_libluafs_done=90
fi

clean_module

# back to root
cd ..

}


### lua-resty-template
build_kernel_libluatemplate() {
dir="lua-resty-template"
step1=0
step2=0
step3=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install template.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp -R lib/resty/template* ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install template.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kernel_libluatemplate_done=`expr $step1 + $step2`
if [ $kernel_libluatemplate_done -eq 2 ]; then
   kernel_libluatemplate_done=1
else
   kernel_libluatemplate_done=90
fi

clean_module

# back to root
cd ..

}


### lua-resty-session
build_kernel_libluasession() {
dir="lua-resty-session"
step1=0
step2=0
step3=0


cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install session.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp lib/resty/session.lua ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install session.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kernel_libluasession_done=`expr $step1 + $step2`
if [ $kernel_libluasession_done -eq 2 ]; then
   kernel_libluasession_done=1
else
   kernel_libluasession_done=90
fi

clean_module

# back to root
cd ..

}


### router.lua
build_kernel_libluarouter() {
dir="router.lua"
step1=0
step2=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install router.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp router.lua ${iprefix}/lualib/resty
if [ $? -ne 0 ]; then
    echo "Error: cannot install router.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kernel_libluarouter_done=`expr $step1 + $step2`
if [ $kernel_libluarouter_done -eq 2 ]; then
   kernel_libluarouter_done=1
else
   kernel_libluarouter_done=90
fi

clean_module

# back to root
cd ..

}


### date.lua
build_kernel_libdate() {
dir="date"
step1=0
step2=0

cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install date.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp date.lua ${iprefix}/lualib/
if [ $? -ne 0 ]; then
    echo "Error: cannot install date.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kernel_libdate_done=`expr $step1 + $step2`
if [ $kernel_libdate_done -eq 2 ]; then
   kernel_libdate_done=1
else
   kernel_libdate_done=90
fi

clean_module

# back to root
cd ..

}


### inspect.lua
build_kernel_libluainspect() {
dir="inspect.lua"
step1=0
step2=0
step3=0


cd lib

# STEP 1
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi


# STEP 2

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Install inspect.lua ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp inspect.lua ${iprefix}/lualib
if [ $? -ne 0 ]; then
    echo "Error: cannot install inspect.lua script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step2=1
fi

# final check; all 2 steps
kernel_libluainspect_done=`expr $step1 + $step2`
if [ $kernel_libluainspect_done -eq 2 ]; then
   kernel_libluainspect_done=1
else
   kernel_libluainspect_done=90
fi

clean_module

# back to root
cd ..

}


### configuration settings
build_kernel_config() {

dir=config
step1=0

## change OS name directory
cd $dir/${OS_NAME}

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing nginx wrappers ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ $enterprise_sem -eq 1 ]; then
    cp nginx.conf.maas ${iprefix}/nginx/conf/nginx.conf
elif [ $rbpi_sem -eq 1 ]; then
    cp nginx.conf.rbpi ${iprefix}/nginx/conf/nginx.conf
fi

if [ $? -ne 0 ]; then
    echo "Error: cannot install nginx.conf script !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
     rm /var/tmp/build.${module}
     exit 3
else
    step1=1
fi


# final check
kernel_config_done=$step1
if [ $kernel_config_done -eq 1 ]; then
   kernel_config_done=1
else
   kernel_config_done=90
fi

cd ../..

}



### finalize
build_kernel_fin() {
dir=etc
step1=0
step2=0
step3=0
step4=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Setting up directory structure ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ ! -d ${iprefix}/etc ]; then
    mkdir ${iprefix}/etc
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup etc directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/app ]; then
    mkdir ${iprefix}/app
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup app directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/static ]; then
    mkdir ${iprefix}/static
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup static directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
fi


if [ ! -d ${iprefix}/logs ]; then
    mkdir ${iprefix}/logs
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup logs directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi

    step1=`expr $step1 + 1`
fi


if [ ! -d ${iprefix}/subscriptions ]; then
    mkdir ${iprefix}/subscriptions
    if [ $? -ne 0 ]; then
        echo "Error: cannot setup subscriptions directory !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi

    step1=`expr $step1 + 1`
fi

# there are 5 steps
step1=`expr $step1 / 5`


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Installing kernel startup services ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp kronometrix.kernel* ${iprefix}/etc/
if [ $enterprise_sem -eq 1 ]; then
    cp redis.conf.maas ${iprefix}/etc/redis.conf
elif [ $rbpi_sem -eq 1 ]; then
    cp redis.conf.rbpi ${iprefix}/etc/redis.conf
fi

if [ $? -ne 0 ]; then
    echo "Error: cannot install kernel startup services !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Installing RELEASENOTES and README ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
cd ..
cp RELEASENOTES README TUNING ${iprefix}/
if [ $? -ne 0 ]; then
    echo "Error: cannot install RELEASENOTES README !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# final check; all 3 steps
kernel_fin_done=`expr $step1 + $step2 + $step3`
if [ "$kernel_fin_done" -eq 3 ]; then
   kernel_fin_done=1
else
   kernel_fin_done=90
fi

}

### freebsd package
build_kernel_freebsd_pkg() {

dir='pkg/freebsd'
step1=0
step2=0
step3=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: FreeBSD package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Create stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    pkgname="kronometrix-kernel-${krmxver}-amd64"
else
    pkgname="kronometrix-kernel-${krmxver}-${PT_NAME}"
fi

if [ ! -d $pkgname ]; then
    mkdir -p "$pkgname"
    if [ $? -ne 0 ]; then
        echo "Error: cannot set working package directory !" |\
            tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
fi


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Prepare stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# copy config files
if [ "$PT_NAME" = "amd64" ]; then
    cp MANIFEST.amd64 $pkgname/MANIFEST
elif [ "$PT_NAME" = "i386" ]; then
    cp MANIFEST.i386 $pkgname/MANIFEST
fi


cd ${pkgname}

if [ "$buildno" -ne 0 ]; then

    # get control file fixed correct build and version
    sed "s/^version.*/version: \"${krmxver}b${buildno}\"/" MANIFEST > MANIFEST.tmp
    mv MANIFEST.tmp MANIFEST

    if [ -d /opt/kronometrix/kernel ]; then
        for f in `find /opt/kronometrix/kernel -type f`
        do
            echo "$f: \"`sha256 -q $f`\"," >> files.txt
        done
        echo "files: {" >> MANIFEST
        cat files.txt >> MANIFEST
        echo "}" >> MANIFEST
    fi
else

    # get control file fixed correct build and version
    sed "s/^version.*/version: \"${krmxver}\"/" MANIFEST > MANIFEST.tmp
    mv MANIFEST.tmp MANIFEST

    if [ -d /opt/kronometrix/kernel ]; then
        for f in `find /opt/kronometrix/kernel -type f`
        do
            echo "$f: \"`sha256 -q $f`\"," >> files.txt
        done
        echo "files: {" >> MANIFEST
        cat files.txt >> MANIFEST
        echo "}" >> MANIFEST
    fi
fi
if [ $? -ne 0 ]; then
    echo "Error: cannot set FreeBSD pkg, MANIFEST create error !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=`expr $step2 + 1`
fi


rm files.txt
mv MANIFEST \+MANIFEST
(cd /opt/kronometrix ; tar cf - kernel)|(mkdir -p opt/kronometrix; cd opt/kronometrix; tar xpf -)

pkg create -m . -r . -o /var/tmp >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cannot build FreeBSD pkg, pkg create error !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=`expr $step2 + 1`
fi


# set release
REL=`echo $KERNEL | sed 's/\-.*//'`

# copy config files
if [ "$buildno" -ne 0 ]; then
    mv /var/tmp/kronometrix-kernel-${krmxver}b${buildno}.txz /var/tmp/kronometrix-kernel-${krmxver}b${buildno}-${OS_NAME}${REL}-${PT_NAME}.txz
else
    cp /var/tmp/kronometrix-kernel-${krmxver}.txz /var/tmp/kronometrix-kernel-${krmxver}-${OS_NAME}${REL}-${PT_NAME}.txz
fi


step2=`expr $step2 / 2`

cd ..

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Cleanup stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -d $pkgname ]; then
    rm -rf $pkgname
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean stage directory !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step3=1
    fi
fi


# final check; 3 steps
kernel_fbsd_pkg_done=`expr $step1 + $step2 + $step3`
if [ "$kernel_fbsd_pkg_done" -eq 3 ]; then
   kernel_fbsd_pkg_done=1
else
   kernel_fbsd_pkg_done=90
fi

cd ../..

}



build_kernel_pkg() {

dir=pkg
step1=0
step2=0


echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: tar package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
# tar package must be created

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Kronometrix tar package" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

build_kernel_freebsd_pkg

}

