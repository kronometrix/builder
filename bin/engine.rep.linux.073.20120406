#!/usr/bin/ksh93
#
#  SDR Development tools, Linux reporting engine
#
#  Copyright (c) 2014 Stefan Parvu (www.systemdatarecorder.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 0.6.2

# ############################################################### #
# SDR Engine: Reporting Linux                                     #
# ############################################################### #


# ############################################################### #
# extract_archive                                                 #
# ############################################################### #
extract_archive() {
# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# print "module name: $modfile"
# print "archive dir: $bfile"

if [[ -d $bfile ]]; then
    print "Info: Step 1 - Extracting $bfile ..." |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    print "Warning: ${bfile} directory found, cleaning..." |\
     tee -a ${BUILD_LOG}/${module}.${version}.log

    rm -rf ${bfile}
    if (( $? != 0 )); then
        print "Error: cannot clean. Check ${modfile} , ${bfile}" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_LOG}/${module}.${version}.log
else
    print "Info: Step 1 - Extracting $bfile ..." |\
    tee -a ${BUILD_LOG}/${module}.${version}.log
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_LOG}/${module}.${version}.log
fi

}



# ############################################################### #
# Reporting: Libidn Build Phase                                   #
# ############################################################### #

build_rep_idn() {
dir=idn
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


if [[ "$PT_NAME" == "x86_64" ]]; then 
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
        -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1
else
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
        LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
        -L/lib -L/usr/lib" ./configure \
    --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rep_idn_done = step1 + step2 + step3 + step4 ))
if (( rep_idn_done == 4 )); then
   rep_idn_done=1
else
   rep_idn_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..


}


# ############################################################### #
# Reporting: Libcurl Build Phase                                  #
# ############################################################### #

build_rep_curl() {
dir=curl
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure --enable-cookies --enable-nonblocking \
    --with-libidn --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rep_curl_done = step1 + step2 + step3 + step4 ))
if (( rep_curl_done == 4 )); then
   rep_curl_done=1
else
   rep_curl_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..


}




# ############################################################### #
# Reporting: pkg-config Build Phase                               #
# ############################################################### #
build_rep_pkgconfig() {
dir=pkg-config
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
#env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
#    CC=cc CFLAGS="-m64 -O3 -I${iprefix}/include" \
#    LDFLAGS="-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
#    ./configure --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    GLIB_CFLAGS="-I${iprefix}/include/glib-2.0 -I${iprefix}/include/glib-2.0/glib" \
    GLIB_LIBS="-lglib-2.0" CC=cc CFLAGS="-m64 -O3 -I${iprefix}/include" \
    LDFLAGS="-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( rep_pkgc_done = step1 + step2 + step3 + step4 ))
if (( rep_pkgc_done == 4 )); then
   rep_pkgc_done=1
else
   rep_pkgc_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: libpng Build Phase                                   #
# ############################################################### #
build_rep_libpng() {
dir=libpng
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig PATH=${iprefix}/bin:$PATH \
    CFLAGS="-O3 -I${iprefix}/include"                        \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( rep_libpng_done = step1 + step2 + step3 + step4 ))
if (( rep_libpng_done == 4 )); then
   rep_libpng_done=1
else
   rep_libpng_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Reporting: freetype Build Phase                                 #
# ############################################################### #
build_rep_freetype() {
dir=freetype
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig PATH=${iprefix}/bin:$PATH \
    CFLAGS="-O3 -I${iprefix}/include"                        \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( rep_freetype_done = step1 + step2 + step3 + step4 ))
if (( rep_freetype_done == 4 )); then
   rep_freetype_done=1
else
   rep_freetype_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}




# ############################################################### #
# Reporting: fontconfig Build Phase                               #
# ############################################################### #
build_rep_fontconfig() {
dir=fontconfig
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig PATH=${iprefix}/bin:$PATH \
    CFLAGS="-O3 -I${iprefix}/include"                        \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} --with-freetype-config=${iprefix}/bin/freetype-config >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( rep_fontconfig_done = step1 + step2 + step3 + step4 ))
if (( rep_fontconfig_done == 4 )); then
   rep_fontconfig_done=1
else
   rep_fontconfig_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}




# ############################################################### #
# Reporting: pixman Build Phase                                   #
# ############################################################### #
build_rep_pixman() {
dir=pixman
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-m64 -O3 -I${iprefix}/include" \
    LDFLAGS="-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( rep_pixm_done = step1 + step2 + step3 + step4 ))
if (( rep_pixm_done == 4 )); then
   rep_pixm_done=1
else
   rep_pixm_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: cairo Build Phase                                    #
# ############################################################### #
build_rep_cairo() {
dir=cairo
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    CC=cc CFLAGS="-m64 -O3 -fPIC -I${iprefix}/include" \
    LDFLAGS="-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --enable-xlib=no \
    --prefix=${iprefix} --enable-win32=no >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( rep_cairo_done = step1 + step2 + step3 + step4 ))
if (( rep_cairo_done == 4 )); then
   rep_cairo_done=1
else
   rep_cairo_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: glib Build Phase                                     #
# ############################################################### #
build_rep_glib() {
dir=glib
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
#${iprefix}/perl/bin/perl -pe "s%lresolv%lresolv -lsocket%" -i configure
env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-m64 -O3 -fPIC -I${iprefix}/include" \
    LDFLAGS="-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} --with-libiconv=gnu >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi

if [[ ! -f ${iprefix}/include/glib-2.0/glibconfig.h ]]; then
    # we copy over glibconfig.h
    cp glib/glibconfig.h ${iprefix}/include/glib-2.0
fi


# final check; all 4 steps
(( rep_glib_done = step1 + step2 + step3 + step4 ))
if (( rep_glib_done == 4 )); then
   rep_glib_done=1
else
   rep_glib_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: pango Build Phase                                    #
# ############################################################### #
build_rep_pango() {
dir=pango
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

#/bin/perl -pe "s%CXXFLAGS -fno-rtti -fno-exceptions%CXXFLAGS%" -i configure

# fix here all GLIB_MKENUMS PATH

grep 'GLIB_MKENUMS = glib-mkenums' Makefile >/dev/null 2>&1
if (( $? == 0 )); then
    # we have a go for fix
    for f in $(find . -type f -name Makefile)
    do 
        perl -piw -e "s%^GLIB_MKENUMS \= glib-mkenums.*%GLIB_MKENUMS \= \/opt\/sdr\/report\/bin\/glib-mkenums%" $f
    done
fi
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig PATH=${iprefix}/bin:$PATH \
    CFLAGS="-O3 -fPIC -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} --without-x >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( rep_pango_done = step1 + step2 + step3 + step4 ))
if (( rep_pango_done == 4 )); then
   rep_pango_done=1
else
   rep_pango_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: rrdtool Build Phase                                  #
# ############################################################### #
build_rep_rrd() {
dir=rrdtool
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig      \
    CC=cc CFLAGS="-m64 -O3 -I${iprefix}/include"  \
    LDFLAGS="-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure -disable-ruby --disable-tcl --disable-python --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( rep_rrd_done = step1 + step2 + step3 + step4 ))
if (( rep_rrd_done == 4 )); then
   rep_rrd_done=1
else
   rep_rrd_done=90
fi

# get RRD bindings installed

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 5 - Perl RRD modules..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

if [[ -d bindings ]];then
    cd bindings 

    # perl-piped
    cd perl-piped

    make clean >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: rrd perl-piped make clean failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
    fi

    ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: rrd perl-piped Makefile.PL failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
    fi

    make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: rrd perl-piped make failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
    fi

    make test >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: rrd perl-piped make test failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
    fi

    make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: rrd perl-piped make install failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
    fi

    # perl-shared
    cd ../perl-shared
   
    make clean >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: rrd perl-shared make clean failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
    fi

    ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: rrd perl-shared Makefile.PL failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
    fi
 
    # fix Makefile
    ${iprefix}/perl/bin/perl -pe \
     "s%^LDFLAGS = .*%LDFLAGS = -m64 -fstack-protector \
     -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib %" -i Makefile >> ${BUILD_LOG}/${module}.${version}.log 2>&1

    ${iprefix}/perl/bin/perl -pe \
     "s%^LDDLFLAGS = .*%LDDLFLAGS = -m64 -shared -O3 \
     -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib%" -i Makefile >> ${BUILD_LOG}/${module}.${version}.log 2>&1

    make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: rrd perl-shared make failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
    fi

    make test >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: rrd perl-shared make test failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
    fi

    make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: rrd perl-shared make install failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
    fi
   
    # back to rrdtool main installation
    cd ../..
fi
 

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: gettext Build Phase                                  #
# ############################################################### #
build_rep_gettext() {
dir=gettext
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
             -L/lib64 -L/usr/lib64" ./configure \
            --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( rep_gett_done = step1 + step2 + step3 + step4 ))
if (( rep_gett_done == 4 )); then
   rep_gett_done=1
else
   rep_gett_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: openssl Build Phase                                  #
# ############################################################### #
build_rep_ossl() {
dir=openssl
step1=0
step2=0
step3=0
step4=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}


print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

if [[ "$PT_NAME" == "x86_64" ]]; then
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
     ./Configure linux-x86_64 threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_LOG}/${module}.${version}.log 2>&1
else
    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
     ./Configure linux-elf threads shared --prefix=${iprefix} \
     --openssldir=${iprefix}/openssl >> ${BUILD_LOG}/${module}.${version}.log 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
(( rep_ossl_done = step1 + step2 + step3 + step4 ))
if (( rep_ossl_done == 4 )); then
   rep_ossl_done=1
else
   rep_ossl_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}




# ############################################################### #
# Reporting: Perl Build Phase                                     #
# ############################################################### #
build_rep_perl() {
dir=perl
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0
step7=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# get CPAN version
print $dirarchive | sed 's/perl-//' | read cpanver

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure perl ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

if [[ "$PT_NAME" == "x86_64" ]]; then
   sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitall \
   -Dusethreads -Dcf_by="support@systemdatarecorder.org"       \
   -Dcf_email="support@systemdatarecorder.org"    \
   -Dprefix=${iprefix}/perl -des >> ${BUILD_LOG}/${module}.${version}.log 2>&1
else
   sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitint \
   -Dusethreads -Dcf_by="support@systemdatarecorder.org"       \
   -Dcf_email="support@systemdatarecorder.org"    \
   -Dprefix=${iprefix}/perl -des >> ${BUILD_LOG}/${module}.${version}.log 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make perl..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi

# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make test perl..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make test >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make test perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi

# STEP 5
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 5 - Make install perl..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
 
if [[ -d ${iprefix}/perl ]]; then
    print "Warning: perl directory found, cleaning it..." |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm -rf ${iprefix}/perl
    if (( $? != 0 )); then
        print "Error: cleaning $dir directory" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
        exit 3
    fi
fi
 
make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step5=1
fi

# STEP 6

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 6 - CPAN modules" | tee -a ${BUILD_LOG}/${module}.${version}.log

cp /opt/build/cpan/Config.pm ${iprefix}/perl/lib/${cpanver}/CPAN

${iprefix}/perl/bin/perl -MCPAN -e 'install Bundle::LWP' >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: Bundle::LWP installation failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    (( step6 = step6 + 1))
fi


for lib in YAML Expect Test::Pod Test::Pod::Coverage HTML::CalendarMonth    \
           FCGI CGI CGI::Simple CGI::Minimal FCGI::ProcManager              \
           FCGI::Spawn IO::All HTTP::Async Term::ProgressBar                \
           PerlIO::gzip Date::Manip Date::Calc PDF::Create                  \
           Statistics::Distributions Statistics::Frequency                  \
           Statistics::Shannon Statistics::GammaDistribution                \
           Statistics::Basic HTML::Calendar::Simple HTML::Calendar::Monthly \
           HTML::CalendarMonthSimple IO::Prompt Smart::Comments Net::Telnet \
           Net::SSH::Expect Authen::SASL Email::Send Email::Valid MIME::Lite\
           Text::CSV_XS Text::CSV Regexp::Common IO::Interactive            \
           Compress::Zlib Regexp::Log::DateRange Term::Prompt               \
           Net::Netmask Text::Autoformat Text::FormatTable Data::Dumper     \
           Perl::Critic Fatal Devel::Cover Devel::Cycle Data::Report        \
           Test::Deep Devel::Size                                           \
           Logfile::Rotate Log::Log4perl Statistics::R Geo::IPfree          \
           Archive::Zip Time::HiRes Net::Ping::External threads::shared     \
           Thread::Queue Net::Ping::Network Net::IP XML::TreePP XML::SAX    \
           XML::NamespaceSupport version SemVer
do

    if [[ $lib == "MIME::Lite" ]]; then
        env PERL_MM_USE_DEFAULT=1 \
          ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> \
          ${BUILD_LOG}/${module}.${version}.log 2>&1
        if (( $? != 0 )); then
            tee -a ${BUILD_LOG}/${module}.${version}.log
            exit 3
        else
            ((step6 = step6 + 1))
            continue
        fi
    fi


    ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    if (( $? != 0 )); then
        print "Error: $lib installation failed !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
        exit 3
    else
        ((step6 = step6 + 1))
    fi
done

# there are 70 perl modules install calls
(( step6 = step6 / 70 ));


# final check; all 6 steps
(( rep_perl_done = step1 + step2 + step3 + step4 + step5 + step6 ))
if (( rep_perl_done == 6 )); then
   rep_perl_done=1
else
   rep_perl_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Reporting:: iconv Build Phase                                   #
# ############################################################### #

build_rep_iconv() {
dir=iconv
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1
 
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rep_iconv_done = step1 + step2 + step3 + step4 ))
if (( rep_iconv_done == 4 )); then
   rep_iconv_done=1
else
   rep_iconv_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Reporting:: libxml2 Build Phase                                   #
# ############################################################### #

build_rep_libxml2() {
dir=libxml2
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure --with-python=no \
    --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1
 
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rep_libxml2_done = step1 + step2 + step3 + step4 ))
if (( rep_libxml2_done == 4 )); then
   rep_libxml2_done=1
else
   rep_libxml2_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Reporting:: readline Build Phase                                #
# ############################################################### #

build_rep_readline() {
dir=readline
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rep_rdln_done = step1 + step2 + step3 + step4 ))
if (( rep_rdln_done == 4 )); then
   rep_rdln_done=1
else
   rep_rdln_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: GD Build Phase                                       #
# ############################################################### #

build_rep_gd() {
dir=gd
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
 
env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

/bin/sh config/missing --run aclocal-1.9 -I config >> ${BUILD_LOG}/${module}.${version}.log 2>&1
/bin/sh config/missing --run automake-1.9 --foreign >> ${BUILD_LOG}/${module}.${version}.log 2>&1
/bin/sh config/missing --run autoconf >> ${BUILD_LOG}/${module}.${version}.log 2>&1

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rep_gd_done = step1 + step2 + step3 + step4 ))
if (( rep_gd_done == 4 )); then
   rep_gd_done=1
else
   rep_gd_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: Perl Modules: GD                                     #
# ############################################################### #

build_rep_perlmods() {

dir=perlmods
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc ${iprefix}/perl/bin/perl Makefile.PL  >> ${BUILD_LOG}/${module}.${version}.log 2>&1

# LDFLAGS =  -m64 -L/lib/64 
#sed 's/LDFLAGS \=  \-m64 \-L\/lib\/64/LDFLAGS \= \-m64 \-L\/lib\/64 \-L\/usr\/sfw\/lib\/amd64 \-R\/usr\/sfw\/lib\/amd64 \-L\/opt\/sdr\/report\/lib \-R\/opt\/sdr\/report\/lib/' Makefile > Makefile.tmp

sed "s:LDFLAGS =  -m64 -L/lib/64:LDFLAGS = -m64 -L${iprefix}/lib -R${iprefix}/lib -L/lib/64 -L/usr/sfw/lib/64 -R/usr/sfw/lib/64:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

# LDDLFLAGS =  -G -m64 -L/lib/64
#sed 's/LDDLFLAGS \=  \-G \-m64 \-L\/lib\/64/LDDLFLAGS \= \-G \-m64 \-L\/usr\/sfw\/lib\/amd64 \-R\/usr\/sfw\/lib\/amd64 \-L\/lib\/64 \-L\/opt\/sdr\/report\/lib \-R\/opt\/sdr\/report\/lib/' Makefile > Makefile.tmp

sed "s:LDDLFLAGS =  -G -m64 -L/lib/64:LDDLFLAGS = -G -m64 -L${iprefix}/lib -R${iprefix}/lib -L/usr/sfw/lib/64 -R/usr/sfw/lib/64 -L/lib/64:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile


# CCFLAGS
sed 's/^CCFLAGS.*/CCFLAGS \= \-m64/' Makefile > Makefile.tmp
mv Makefile.tmp Makefile

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# STEP 5
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 5 - Install CPAN GD modules..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

for lib in GD::Text GD::Graph Chart::Base Template::Plugin::GD::Image
do
    env PERL_MM_USE_DEFAULT=1 \
      ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> \
        ${BUILD_LOG}/${module}.${version}.log 2>&1
        if (( $? != 0 )); then
            tee -a ${BUILD_LOG}/${module}.${version}.log
            exit 3
        else
            ((step5 = step5 + 1))
        fi
done

# there are 4 perl modules install calls
(( step5 = step5 / 4 ));


#
# final check; all 5 steps
(( rep_perlmodules_done = step1 + step2 + step3 + step4 + step5))
if (( rep_perlmodules_done == 5 )); then
   rep_perlmodules_done=1
else
   rep_perlmodules_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: Perl Module:  XML::LibXML                            #
# ############################################################### #

build_rep_xmllibxml() {

dir=XML-LibXML
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env ${iprefix}/perl/bin/perl Makefile.PL XMLPREFIX=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

#
# final check; all 4 steps
(( rep_perllxml_done = step1 + step2 + step3 + step4 ))
if (( rep_perllxml_done == 4 )); then
   rep_perllxml_done=1
else
   rep_perllxml_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Reporting: Perl Module: DBD::Pg                                 #
# ############################################################### #

build_rep_dbdpg() {

dir=dbdpg
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PATH=${iprefix}/bin:$PATH ${iprefix}/perl/bin/perl Makefile.PL  >> ${BUILD_LOG}/${module}.${version}.log 2>&1

cp ../Makefile.good Makefile
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

#
# final check; all 4 steps
(( rep_dbdpg_done = step1 + step2 + step3 + step4 ))
if (( rep_dbdpg_done == 4 )); then
   rep_dbdpg_done=1
else
   rep_dbdpg_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: PCRE Build Phase                                     #
# ############################################################### #

build_rep_pcre() {
dir=pcre
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
 
env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure \
    --disable-cpp --enable-utf8 --enable-unicode-properties \
    --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rep_pcre_done = step1 + step2 + step3 + step4 ))
if (( rep_pcre_done == 4 )); then
   rep_pcre_done=1
else
   rep_pcre_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: FCGI Build Phase                                     #
# ############################################################### #

build_rep_fcgi() {
dir=fcgi
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
 
env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
    -L/lib64 -L/usr/lib64" ./configure \
    --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

# if we are in gcc 4.4 and debian based system we might hit
# Debian Bug report logs - #504963

/usr/bin/lsb_release -i | sed 's/^Distributor ID://' | read distro
if [[ $distro == "Ubuntu" ]]; then
    # check gcc version   
    gcc --version | head -1 | sed 's/^.* //' | read gccver

    case "$gccver" in
     4.4*)
         # we are using gcc 4.4+
         ${iprefix}/perl/bin/perl -pi -le 'print "#include <cstdio>" if $. == 24' libfcgi/fcgio.cpp     
    esac
fi


make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rep_fcgi_done = step1 + step2 + step3 + step4 ))
if (( rep_fcgi_done == 4 )); then
   rep_fcgi_done=1
else
   rep_fcgi_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Recording: Libssh2 Build Phase                                  #
# ############################################################### #

build_rep_ssh2() {
dir=libssh2
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

if [[ "$PT_NAME" == "x86_64" ]]; then
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
     LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
      -L/lib64 -L/usr/lib64" \
      ./configure --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1
else
    env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
     LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
      -L/lib -L/usr/lib" \
      ./configure --prefix=${iprefix} >> ${BUILD_LOG}/${module}.${version}.log 2>&1
fi


if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  



# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rep_ssh2_done = step1 + step2 + step3 + step4 ))
if (( rep_ssh2_done == 4 )); then
   rep_ssh2_done=1
else
   rep_ssh2_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Recording: Perl Modules: Net::SSH2                              #
# ############################################################### #

build_rep_perlssh2() {

dir=Net-SSH2
step1=0
step2=0
step3=0
step4=0
step5=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


env LD_LIBRARY_PATH=${iprefix}/lib \
${iprefix}/perl/bin/perl Makefile.PL lib=${iprefix}/lib inc=${iprefix}/include >> ${BUILD_LOG}/${module}.${version}.log 2>&1

sed "s:LDFLAGS =  -fstack-protector -L/usr/local/lib:LDFLAGS = -fstack-protector -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

sed "s:LDDLFLAGS = -shared -O3 -L/usr/local/lib -fstack-protector:LDDLFLAGS = -shared -O3 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib -fstack-protector:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile


sed "s:CCFLAGS =.*:CCFLAGS = -fno-strict-aliasing -pipe -fstack-protector -I${iprefix}/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi



# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 



# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make test $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make test >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi


#
# final check; all 5 steps
(( rep_perlssh2_done = step1 + step2 + step3 + step4 + step5 ))
if (( rep_perlssh2_done == 5 )); then
   rep_perlssh2_done=1
else
   rep_perlssh2_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: FCGIWRAP Build Phase                                 #
# ############################################################### #

build_rep_fcgiwrap() {
dir=fcgiwrap
step1=0
step2=0
step3=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi 

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

if [[ ! -d ${iprefix}/ws/sbin ]]; then
    mkdir ${iprefix}/ws/sbin
fi

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install fcgiwrap failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# final check; all 3 steps
(( rep_fcgiw_done = step1 + step2 + step3 ))
if (( rep_fcgiw_done == 3 )); then
   rep_fcgiw_done=1
else
   rep_fcgiw_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Reporting: WS Build Phase                                       #
# ############################################################### #

build_rep_ws() {
dir=ws
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

# copy the fair plugin
cp -pr ../../upstream .

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

if [[ $PT_NAME == "i686" ]]; then
    env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig   \
    CC=cc CFLAGS="-O3"                             \
    ./configure --prefix=${iprefix}/ws --with-ipv6 \
    --with-perl=${iprefix}/perl/bin                \
    --with-http_ssl_module                         \
    --with-http_stub_status_module                 \
    --with-http_realip_module                      \
    --with-http_flv_module                         \
    --with-http_gzip_static_module                 \
    --with-cc-opt="-I${iprefix}/include"           \
    --with-ld-opt="-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    --add-module=upstream >> ${BUILD_LOG}/${module}.${version}.log 2>&1
else
    env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig   \
    CC=cc CFLAGS="-m64 -O3"                        \
    ./configure --prefix=${iprefix}/ws --with-ipv6 \
    --with-perl=${iprefix}/perl/bin                \
    --with-http_ssl_module                         \
    --with-http_stub_status_module                 \
    --with-http_realip_module                      \
    --with-http_flv_module                         \
    --with-http_gzip_static_module                 \
    --with-cc-opt="-I${iprefix}/include"          \
    --with-ld-opt="-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    --add-module=upstream >> ${BUILD_LOG}/${module}.${version}.log 2>&1
fi

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
(( rep_ws_done = step1 + step2 + step3 + step4 ))
if (( rep_ws_done == 4 )); then
   rep_ws_done=1
else
   rep_ws_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Reporting: R Build Phase                                        #
# ############################################################### #
build_rep_R() {
dir=R
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log


env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig      \
    CFLAGS="-std=gnu99 -O3 -I${iprefix}/include"  \
    FFLAGS="-O3 -I${iprefix}/include"             \
    FCFLAGS="-O3 -I${iprefix}/include"            \
    CXXFLAGS="-O3 -I${iprefix}/include"           \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib \
            -Wl,-rpath -Wl,${iprefix}/R/lib64"   \
    ./configure --with-x --prefix=${iprefix}/R >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step2=1
fi  

# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step3=1
fi 


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install perl failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    exit 3
else
    step4=1
fi

# set the sym links
ln -s ${iprefix}/R/lib64/R/lib/libRblas.so ${iprefix}/R/lib64/libRblas.so
ln -s ${iprefix}/R/lib64/R/lib/libRlapack.so ${iprefix}/R/lib64/libRlapack.so


# final check; all 4 steps
(( rep_rsts_done = step1 + step2 + step3 + step4 ))
if (( rep_rsts_done == 4 )); then
   rep_rsts_done=1
else
   rep_rsts_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}



# ############################################################### #
# Recording: Scripts                                              #
# ############################################################### #

# init.nginx-fcgi
# nginx-fcgi.pl
# nginx-fcgi.x86.boot
# htpasswd

build_rep_ws_scripts() {

dir=wsscripts
step1=0
step2=0


cd $dir/${OS_NAME}
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_LOG}/${module}.${version}.log

# STEP 1
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 1 - Installing nginx wrappers ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

cp *nginx* htpasswd ${iprefix}/ws/sbin
if (( $? != 0 )); then
    print "Error: cannot install nginx scripts !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi


# final check; all 2 steps
(( rep_wsscripts_done = step1 ))
if (( rep_wsscripts_done == 1 )); then
   rep_wsscripts_done=1
else
   rep_wsscripts_done=90
fi


cd ../..

}




# ############################################################### #
# Recording: Test Scripts                                         #
# ############################################################### #
test_rec_scripts() {

dir=tests
step1=0
step2=0
step3=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Testing SDR" | tee -a ${BUILD_LOG}/${module}.${version}.log

# STEP 1
# Check all recorders if they are sane and execute properly

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 1 - Check recorders" |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

. /opt/sdr/bin/setenv
for r in sys cpu net nic hdw zone
do
    print "" >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    print "Executing ${r}rec" | tee -a ${BUILD_LOG}/${module}.${version}.log
    if [[ $r == "nic" ]]; then
        ${SDR_BIN}/${r}rec_x64 >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    else
        ${SDR_BIN}/${r}rec >> ${BUILD_LOG}/${module}.${version}.log 2>&1
    fi
    
    if (( $? != 0 )); then
        print "Error: cannot run ${r}rec !" |\
         tee -a ${BUILD_LOG}/${module}.${version}.log
        rm /var/tmp/build.${module}
        exit 3
    else
        ((step1=step1+1))
    fi
done

(( step1 = step1 / 5 ))

# final check; all 4 steps
(( rep_tests_done = step1 ))
if (( rep_tests_done == 1 )); then
   rep_tests_done=1
else
   rep_tests_done=90
fi

cd ..

}



# ############################################################### #
# Reporting: PDQ Build Phase                                      #
# ############################################################### #

build_rep_pdq() {
dir=pdq
step1=0
step2=0
step3=0
step4=0
step5=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log

# STEP 1
print "Info: Step 1 - Make PDQ lib..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

# clean general
make clean >> ${BUILD_LOG}/${module}.${version}.log 2>&1


cd lib
# cleaning all object files
make -f Makefile.linux clean >> ${BUILD_LOG}/${module}.${version}.log 2>&1

# build lib
make -f Makefile.linux >> ${BUILD_LOG}/${module}.${version}.log 2>&1   
if (( $? != 0 )); then
    print "Error: make pdq/lib $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi 


# STEP 2
print "Info: Step 2 - Make PDQ perl5 lib..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

cd ../perl5
# cleaning all object files
make clean >> ${BUILD_LOG}/${module}.${version}.log 2>&1

# copy .so and .o
cp ../lib/*.o .
cp ../lib/*.so .

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_LOG}/${module}.${version}.log 2>&1

make >> ${BUILD_LOG}/${module}.${version}.log 2>&1   
if (( $? != 0 )); then
    print "Error: make pdq/perl5 $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
print "Info: Step 3 - Make PDQ perl5 install..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1   
if (( $? != 0 )); then
    print "Error: make install pdq/perl5 $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
print "Info: Step 4 - Make PDQ perl5 test..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make test >> ${BUILD_LOG}/${module}.${version}.log 2>&1   
if (( $? != 0 )); then
    print "Error: make test pdq/perl5 $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

cd ..

# STEP 5
print "Info: Step 5 - Make PDQ R lib..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

cd R
cp ../lib/*.[ch] pdq/src
cp ../lib/P*.[h] pdq/lib/

${iprefix}/R/bin/R CMD INSTALL pdq >> ${BUILD_LOG}/${module}.${version}.log 2>&1   
if (( $? != 0 )); then
    print "Error: make pdq/R $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi


# final check; all 4 steps
(( rep_pdq_done = step1 + step2 + step3 + step4 + step5 ))
if (( rep_pdq_done == 5 )); then
   rep_pdq_done=1
else
   rep_pdq_done=90
fi

cd ../..

}



# ############################################################### #
# Reporting: WWW::Curl Phase                                      #
# ############################################################### #
build_rep_wcurl() {

dir=WWW-Curl
step1=0
step2=0
step3=0
step4=0

cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log
ls *.tar.gz | read archive_file
# Debug
# print "Archive: $archive_file"
# print "Dir: ${archive_file%%.tar*}"

dirarchive=${archive_file%%.tar*}

# STEP 1
extract_archive "$dir" "$dirarchive"
if (( $? == 0)); then
    step1=1
fi

# STEP 2
cd ${archive_file%%.tar*}

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
    ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi



# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log
make >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

make install >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: make install gd failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


#
# final check; all 4 steps
(( rep_wcurl_done = step1 + step2 + step3 + step4 ))
if (( rep_wcurl_done == 4 )); then
   rep_wcurl_done=1
else
   rep_wcurl_done=90
fi

cd ..
rm -rf $dirarchive >> ${BUILD_LOG}/${module}.${version}.log 2>&1
if (( $? != 0 )); then
    print "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 5
fi 
cd ..

}


# ############################################################### #
# Reporting: R module: Cairo                                      #
# ############################################################### #
build_rep_rcairo() {

dir=rcairo
step1=0
step2=0
step3=0
step4=0


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log

ls *.tar.gz | read archive_file    

# STEP 1

print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 1 - Install $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi


#
# final check; 1 step
(( rep_rcairo_done = step1 ))
if (( rep_rcairo_done == 1 )); then
   rep_rcairo_done=1
else
   rep_rcairo_done=90
fi

cd ..

}


# ############################################################### #
# Reporting: R module: ggplot2                                    #
# ############################################################### #
build_rep_rggplot2() {
dir=rggplot2
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0
step7=0
step8=0
step9=0

# we build here ggplot2 for R
# order: 
# iterators, itertools, plyr, reshape, RColorBrewer, digest, colorspace, proto, ggplot2


cd $dir
print "\n############################################################"
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Submodule: $dir" | tee -a ${BUILD_LOG}/${module}.${version}.log

# STEP 1
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 1 - Install iterators $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls iterator*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step1=1
fi



# STEP 2
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 2 - Install itertools $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls itertool*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi



# STEP 3
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 3 - Install plyr $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls plyr*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig  \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi



# STEP 4
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 4 - Install reshape $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls reshape*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi



# STEP 5
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 5 - Install RColorBrewer $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls RColorBrewer*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi



# STEP 6
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 6 - Install digest $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls digest*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step6=1
fi



# STEP 7
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 7 - Install colorspace $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls colorspace*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step7=1
fi


# STEP 8
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 8 - Install proto $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls proto*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step8=1
fi


# STEP 9
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 9 - Install stringr $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls stringr*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step9=1
fi


# STEP 10
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 10 - Install reshape2 $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls reshape2*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step10=1
fi


# STEP 11
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 11 - Install dichromat $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls dichromat*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step11=1
fi


# STEP 12
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 12 - Install munsell  $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls munsell*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step12=1
fi


# STEP 13
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 13 - Install scales $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls scales*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step13=1
fi


# STEP 14
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 14 - Install memoise $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls memoise*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step14=1
fi


# STEP 15
print "" >> ${BUILD_LOG}/${module}.${version}.log
print "Info: Step 15 - Install ggplot2 $dir ..." |\
 tee -a ${BUILD_LOG}/${module}.${version}.log

ls ggplot*.tar.gz | read archive_file
env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig \
    ${iprefix}/R/bin/R CMD INSTALL $archive_file >> ${BUILD_LOG}/${module}.${version}.log 2>&1

if (( $? != 0 )); then
    print "Error: configure $dir failed !" |\
     tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step15=1
fi


#
# final check; 1 step
(( rep_rggplot2_done = step1 + step2 + step3 + step4 + step5 + \
                       step6 + step7 + step8 + step9 + step10 +\
                       step11 + step12 + step13 + step14 + step15 ))
if (( rep_rggplot2_done == 15 )); then
   rep_rggplot2_done=1
else
   rep_rggplot2_done=90
fi

cd ..

}
