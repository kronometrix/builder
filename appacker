#!/bin/sh

usage() {

cat << END
Usage: $0 [-b number] [-f filename] command module

Command: package - package the application
         install - package, install and start the application

Modules: auth   - authenticator module
         kernel - kernel module
         mesg   - messenger module
         all    - authenticator, kernel, mesg modules

Options:
         -h help               # help information
         -b number             # package build number
         -f filename           # package filename

Examples:
  appacker package mesg         # package mesg, do not install
  appacker package kernel       # package kernel, do not install
  appacker package auth         # package auth, do not install
  appacker package all          # package auth and kernel, do not install

  appacker install all          # package and install auth, kernel
  appacker install kernel       # package and install kernel
  appacker install auth         # package and install auth
  appacker -b70 install all     # package and install all modules as build 70

Notes:
   Make sure you have defined KRONOMETRIX_PREFIX variable before 
   running $0.
END
exit 1
}


## stop analytics services
stop_auth_http() {
    ${KRONOMETRIX_PREFIX}/auth/etc/http stop
}

stop_auth_db() {
    ${KRONOMETRIX_PREFIX}/auth/etc/db stop
}

stop_kernel_http() {
    ${KRONOMETRIX_PREFIX}/kernel/etc/http stop
}

stop_kernel_db_aux() {
    ${KRONOMETRIX_PREFIX}/kernel/etc/db_aux stop
}

stop_kernel_db_stats() {
    ${KRONOMETRIX_PREFIX}/kernel/etc/db_stats stop
}

stop_mesg_http() {
    ${KRONOMETRIX_PREFIX}/mesg/etc/http stop
}

## start analytics services
start_auth_http() {
    ${KRONOMETRIX_PREFIX}/auth/etc/http start
}

start_auth_db() {
    ${KRONOMETRIX_PREFIX}/auth/etc/db start
}

start_kernel_http() {
    ${KRONOMETRIX_PREFIX}/kernel/etc/http start
}

start_kernel_db_aux() {
    ${KRONOMETRIX_PREFIX}/kernel/etc/db_aux start
}

start_kernel_db_stats() {
    ${KRONOMETRIX_PREFIX}/kernel/etc/db_stats start
}

start_mesg_http() {
    ${KRONOMETRIX_PREFIX}/mesg/etc/http stop
}


## package function
package() {

    docmd=$1

    cd $TEMP_KRONOMETRIX

    #if [ ! -z $build_num ]; then
    #    echo "Cloning QA branch..."
    #    git clone -b qa https://github.com/sdrdynamics/analytics .
    #else 
        echo "Cloning Prod Master branch..."
        git clone https://github.com/sdrdynamics/analytics .
    #fi

    if [ "${docmd}" = "all" ]; then
        for pkg in auth kernel mesg
        do
            tar cf ${KRONOMETRIX_PREFIX}/pkg/k${pkg}-app-${build_num}-${TIMESTAMP}.tar \
             ${pkg}/app ${pkg}/static
            bzip2 ${KRONOMETRIX_PREFIX}/pkg/k${pkg}-app-${build_num}-${TIMESTAMP}.tar
            echo " package: k${pkg}-app-${build_num}-${TIMESTAMP}.tar.bz2 created"
        done

    elif [ "${docmd}" = "auth" ]; then
        tar cf ${KRONOMETRIX_PREFIX}/pkg/kauth-app-${build_num}-${TIMESTAMP}.tar \
          auth/app auth/static
        bzip2 ${KRONOMETRIX_PREFIX}/pkg/kauth-app-${build_num}-${TIMESTAMP}.tar
        echo " package: kauth-app-${build_num}-${TIMESTAMP}.tar.bz2 created"

    elif [ "${docmd}" = "kernel" ]; then
        tar cf ${KRONOMETRIX_PREFIX}/pkg/kkernel-app-${build_num}-${TIMESTAMP}.tar \
          kernel/app kernel/static
        bzip2 ${KRONOMETRIX_PREFIX}/pkg/kkernel-app-${build_num}-${TIMESTAMP}.tar
        echo " package: kkernel-app-${build_num}-${TIMESTAMP}.tar.bz2 created"

    elif [ "${docmd}" = "mesg" ]; then
        tar cf ${KRONOMETRIX_PREFIX}/pkg/kmesg-app-${build_num}-${TIMESTAMP}.tar \
          mesg/app mesg/static
        bzip2 ${KRONOMETRIX_PREFIX}/pkg/kmesg-app-${build_num}-${TIMESTAMP}.tar
        echo " package: kmesg-app-${build_num}-${TIMESTAMP}.tar.bz2 created"
 
    else
        usage
    fi
    
    clean_tmp

    cd --
}


## install function
install() {

    docmd=$1

    if [ "${docmd}" = "all" ]; then

        # package all modules
        package all

        # master stop
        stop_auth_http
        stop_auth_db
        stop_kernel_http
        stop_kernel_db_stats
        stop_kernel_db_aux
        stop_mesg_http

        # backup 
        for pkg in auth kernel mesg
        do
            if [ -d "${KRONOMETRIX_PREFIX}/${pkg}/app" ]; then
                mv ${KRONOMETRIX_PREFIX}/${pkg}/app \
                 ${KRONOMETRIX_PREFIX}/${pkg}/app.old.${TIMESTAMP}
            fi
            if [ -d "${KRONOMETRIX_PREFIX}/${pkg}/static" ]; then
                mv ${KRONOMETRIX_PREFIX}/${pkg}/static \
                 ${KRONOMETRIX_PREFIX}/${pkg}/static.old.${TIMESTAMP}
            fi
            if [ -f "${KRONOMETRIX_PREFIX}/${pkg}/nginx/logs/access.log" ]; then
                mv ${KRONOMETRIX_PREFIX}/${pkg}/nginx/logs/access.log \
                 ${KRONOMETRIX_PREFIX}/${pkg}/nginx/logs/access.${TIMESTAMP}.log
            fi
            if [ -f "${KRONOMETRIX_PREFIX}/${pkg}/nginx/logs/error.log" ]; then
                mv ${KRONOMETRIX_PREFIX}/${pkg}/nginx/logs/error.log \
                 ${KRONOMETRIX_PREFIX}/${pkg}/nginx/logs/error.${TIMESTAMP}.log
            fi
        done
 
        cd ${KRONOMETRIX_PREFIX}
        for pkg in auth kernel mesg
        do
            bzcat pkg/k${pkg}-app-${build_num}-${TIMESTAMP}.tar.bz2 | tar xf -
            echo " package: k${pkg}-app-${build_num}-${TIMESTAMP}.tar.bz2 installed"
        done
        
        # master start
        start_auth_http
        start_auth_db
        start_kernel_http
        start_kernel_db_aux
        start_kernel_db_stats
        start_mesg_http

        cd --

    elif [ "${docmd}" = "auth" ]; then

        package auth
        stop_auth_http
        stop_auth_db

        if [ -d "${KRONOMETRIX_PREFIX}/auth/app" ]; then
            mv ${KRONOMETRIX_PREFIX}/auth/app \
             ${KRONOMETRIX_PREFIX}/auth/app.old.${TIMESTAMP}
        fi
        if [ -d "${KRONOMETRIX_PREFIX}/auth/static" ]; then
            mv ${KRONOMETRIX_PREFIX}/auth/static \
             ${KRONOMETRIX_PREFIX}/auth/static.old.${TIMESTAMP}
        fi
        if [ -f "${KRONOMETRIX_PREFIX}/auth/nginx/logs/access.log" ]; then
            mv ${KRONOMETRIX_PREFIX}/auth/nginx/logs/access.log \
             ${KRONOMETRIX_PREFIX}/auth/nginx/logs/access.${TIMESTAMP}.log
        fi
        if [ -f "${KRONOMETRIX_PREFIX}/auth/nginx/logs/error.log" ]; then
            mv ${KRONOMETRIX_PREFIX}/auth/nginx/logs/error.log \
             ${KRONOMETRIX_PREFIX}/auth/nginx/logs/error.${TIMESTAMP}.log
        fi

        cd ${KRONOMETRIX_PREFIX}
        bzcat pkg/kauth-app-${build_num}-${TIMESTAMP}.tar.bz2 | tar xf -

        echo " package: kauth-app-${build_num}-${TIMESTAMP}.tar.bz2 installed"
        start_auth_http
        start_auth_db

 
    elif [ "${docmd}" = "kernel" ]; then

        package kernel
        stop_kernel_http
        stop_kernel_db_stats
        stop_kernel_db_aux

        if [ -d "${KRONOMETRIX_PREFIX}/kernel/app" ]; then
            mv ${KRONOMETRIX_PREFIX}/kernel/app \
             ${KRONOMETRIX_PREFIX}/kernel/app.old.${TIMESTAMP}
        fi
        if [ -d "${KRONOMETRIX_PREFIX}/kernel/static" ]; then
            mv ${KRONOMETRIX_PREFIX}/kernel/static \
             ${KRONOMETRIX_PREFIX}/kernel/static.old.${TIMESTAMP}
        fi
        if [ -f "${KRONOMETRIX_PREFIX}/kernel/nginx/logs/access.log" ]; then
            mv ${KRONOMETRIX_PREFIX}/kernel/nginx/logs/access.log \
             ${KRONOMETRIX_PREFIX}/kernel/nginx/logs/access.${TIMESTAMP}.log
        fi
        if [ -f "${KRONOMETRIX_PREFIX}/kernel/nginx/logs/error.log" ]; then
            mv ${KRONOMETRIX_PREFIX}/kernel/nginx/logs/error.log \
             ${KRONOMETRIX_PREFIX}/kernel/nginx/logs/error.${TIMESTAMP}.log
        fi

        cd ${KRONOMETRIX_PREFIX}
        bzcat pkg/kkernel-app-${build_num}-${TIMESTAMP}.tar.bz2 | tar xf -

        echo " package: kkernel-app-${build_num}-${TIMESTAMP}.tar.bz2 installed"
        start_kernel_http
        start_kernel_db_aux
        start_kernel_db_stats

    elif [ "${docmd}" = "mesg" ]; then

        package mesg
        stop_mesg_http

        if [ -d "${KRONOMETRIX_PREFIX}/mesg/app" ]; then
            mv ${KRONOMETRIX_PREFIX}/mesg/app \
             ${KRONOMETRIX_PREFIX}/mesg/app.old.${TIMESTAMP}
        fi
        if [ -d "${KRONOMETRIX_PREFIX}/mesg/static" ]; then
            mv ${KRONOMETRIX_PREFIX}/mesg/static \
             ${KRONOMETRIX_PREFIX}/mesg/static.old.${TIMESTAMP}
        fi
        if [ -f "${KRONOMETRIX_PREFIX}/mesg/nginx/logs/access.log" ]; then
            mv ${KRONOMETRIX_PREFIX}/mesg/nginx/logs/access.log \
             ${KRONOMETRIX_PREFIX}/mesg/nginx/logs/access.${TIMESTAMP}.log
        fi
        if [ -f "${KRONOMETRIX_PREFIX}/mesg/nginx/logs/error.log" ]; then
            mv ${KRONOMETRIX_PREFIX}/mesg/nginx/logs/error.log \
             ${KRONOMETRIX_PREFIX}/mesg/nginx/logs/error.${TIMESTAMP}.log
        fi

        cd ${KRONOMETRIX_PREFIX}
        bzcat pkg/kmesg-app-${build_num}-${TIMESTAMP}.tar.bz2 | tar xf -

        echo " package: kmesg-app-${build_num}-${TIMESTAMP}.tar.bz2 installed"
        start_mesg_http

    else
        usage
    fi

    cd --
}


## cleanup tmp
clean_tmp() {

    if [ -d "$TEMP_KRONOMETRIX" ]; then
        rm -rf $TEMP_KRONOMETRIX
        mkdir $TEMP_KRONOMETRIX
    fi
}



### MAIN

## timestamp
TIMESTAMP=`date +"%Y%m%d_%H%M%S"`

while getopts ":b:f:h" arg
do
    case "${arg}" in

        f)
          pkgname=$OPTARG
          ;;

        b)
          build_num=$OPTARG
          ;;

        h)
          usage
          ;;
    esac
done

shift `expr $OPTIND - 1`

# check arguments
if [ $# -lt 2 -o $# -gt 2 ]; then
    usage
fi

# get cmd and module
module=$2
cmd=$1

## check workspace variable
if [ ! -z "$KRONOMETRIX_PREFIX" ]; then
    KRONOMETRIX_PREFIX="${KRONOMETRIX_PREFIX}"
else
    echo "Make sure you have defined KRONOMETRIX_PREFIX"
    exit 1
fi

if [ ! -d "${KRONOMETRIX_PREFIX}" ]; then
    echo "Error: No such directory: ${KRONOMETRIX_PREFIX}"
    exit 1
elif [ ! -d "${KRONOMETRIX_PREFIX}/pkg" ]; then
    echo "Warning: No such directory: ${KRONOMETRIX_PREFIX}/pkg, creating..."
    mkdir ${KRONOMETRIX_PREFIX}/pkg
fi

if [ -z "$build_num" ]; then
    build_num=01
fi

TEMP_KRONOMETRIX="${KRONOMETRIX_PREFIX}/pkg/tmp"
if [ ! -d "${KRONOMETRIX_PREFIX}/pkg/tmp" ]; then
    mkdir ${KRONOMETRIX_PREFIX}/pkg/tmp 
else
    clean_tmp
fi

case "$cmd" in

    package)
        case "$module" in
            auth)
                package auth
                ;;

            kernel)
                package kernel
                ;;

            mesg)
                package mesg
                ;;

            all)
                package all
                ;;

            *)
                usage
                ;;
        esac 
        ;;

    install)

        case "$module" in
            auth)
                install auth
                ;;

            kernel)
                install kernel
                ;;

            mesg)
                package mesg
                ;;

            all)
                install all
                ;;

            *)
                usage
                ;;
        esac
        ;;
    *)
        usage
        ;;
esac
